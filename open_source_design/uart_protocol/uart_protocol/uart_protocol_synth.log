
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys-Verific 0.0.68
 Yosys 0.18+10 (git sha1 c98b0e94e, gcc 9.4.0 -fPIC -Os)


-- Executing script file `uart_protocol.ys' --

1. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific May22_SW_Release, released at Wed Jun  1 05:39:28 2022.

2. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific May22_SW_Release, released at Wed Jun  1 05:39:28 2022.

3. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific May22_SW_Release, released at Wed Jun  1 05:39:28 2022.

4. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific May22_SW_Release, released at Wed Jun  1 05:39:28 2022.
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file '/nfs_scratch/scratch/AE/Roman/open_source_design/uart_protocol/./uart_protocol.v'

5. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific May22_SW_Release, released at Wed Jun  1 05:39:28 2022.
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file '/nfs_scratch/scratch/AE/Roman/open_source_design/uart_protocol/./receiver.v'

6. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific May22_SW_Release, released at Wed Jun  1 05:39:28 2022.
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file '/nfs_scratch/scratch/AE/Roman/open_source_design/uart_protocol/./baud_tick_generator.v'

7. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific May22_SW_Release, released at Wed Jun  1 05:39:28 2022.
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file '/nfs_scratch/scratch/AE/Roman/open_source_design/uart_protocol/./transmitter.v'

8. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific May22_SW_Release, released at Wed Jun  1 05:39:28 2022.
Adding Verilog module 'uart_protocol' to elaboration queue.
Running hier_tree::Elaborate().
VERIFIC-WARNING [VERI-1927] /nfs_scratch/scratch/AE/Roman/open_source_design/uart_protocol/./uart_protocol.v:27: port 'RxD_idle' remains unconnected for this instance
VERIFIC-INFO [VERI-1018] /nfs_scratch/scratch/AE/Roman/open_source_design/uart_protocol/./uart_protocol.v:1: compiling module 'uart_protocol'
VERIFIC-INFO [VERI-1018] /nfs_scratch/scratch/AE/Roman/open_source_design/uart_protocol/./transmitter.v:13: compiling module 'async_transmitter'
VERIFIC-INFO [VERI-1018] /nfs_scratch/scratch/AE/Roman/open_source_design/uart_protocol/./receiver.v:2: compiling module 'async_receiver'
VERIFIC-INFO [VERI-1018] /nfs_scratch/scratch/AE/Roman/open_source_design/uart_protocol/./baud_tick_generator.v:1: compiling module 'BaudTickGen'
Importing module uart_protocol.
Importing module BaudTickGen.
Importing module async_receiver.
Importing module async_transmitter.

9. Executing HIERARCHY pass (managing design hierarchy).

9.1. Analyzing design hierarchy..
Top module:  \uart_protocol
Used module:     \BaudTickGen
Used module:     \async_receiver
Used module:     \async_transmitter

9.2. Analyzing design hierarchy..
Top module:  \uart_protocol
Used module:     \BaudTickGen
Used module:     \async_receiver
Used module:     \async_transmitter
Removed 0 unused modules.

10. Executing synth_rs pass: v0.4.68

10.1. Executing Verilog-2005 frontend: /nfs_cadtools/raptor/08_23_2022_08_00_01/bin/../share/yosys/rapidsilicon/common/cells_sim.v
Parsing Verilog input from `/nfs_cadtools/raptor/08_23_2022_08_00_01/bin/../share/yosys/rapidsilicon/common/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\inv'.
Generating RTLIL representation for module `\buff'.
Generating RTLIL representation for module `\logic_0'.
Generating RTLIL representation for module `\logic_1'.
Generating RTLIL representation for module `\gclkbuff'.
Successfully finished Verilog frontend.

10.2. Executing Verilog-2005 frontend: /nfs_cadtools/raptor/08_23_2022_08_00_01/bin/../share/yosys/rapidsilicon/genesis/cells_sim.v
Parsing Verilog input from `/nfs_cadtools/raptor/08_23_2022_08_00_01/bin/../share/yosys/rapidsilicon/genesis/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\dffsre'.
Generating RTLIL representation for module `\dffnsre'.
Generating RTLIL representation for module `\latchsre'.
Generating RTLIL representation for module `\latchnsre'.
Generating RTLIL representation for module `\io_scff'.
Generating RTLIL representation for module `\scff'.
Generating RTLIL representation for module `\sh_dff'.
Generating RTLIL representation for module `\adder_carry'.
Generating RTLIL representation for module `\sdffr'.
Generating RTLIL representation for module `\sdffs'.
Generating RTLIL representation for module `\TDP_BRAM18'.
Generating RTLIL representation for module `\TDP36K'.
Successfully finished Verilog frontend.

10.3. Executing Verilog-2005 frontend: /nfs_cadtools/raptor/08_23_2022_08_00_01/bin/../share/yosys/rapidsilicon/genesis/dsp_sim.v
Parsing Verilog input from `/nfs_cadtools/raptor/08_23_2022_08_00_01/bin/../share/yosys/rapidsilicon/genesis/dsp_sim.v' to AST representation.
Generating RTLIL representation for module `\RS_DSP1'.
Generating RTLIL representation for module `\RS_DSP2'.
Generating RTLIL representation for module `\RS_DSP2_MULT'.
Generating RTLIL representation for module `\RS_DSP2_MULT_REGIN'.
Generating RTLIL representation for module `\RS_DSP2_MULT_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULT_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD_REGIN'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC_REGIN'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC_REGIN_REGOUT'.
Generating RTLIL representation for module `\dsp_t1_20x18x64_cfg_ports'.
Generating RTLIL representation for module `\dsp_t1_10x9x32_cfg_ports'.
Generating RTLIL representation for module `\dsp_t1_sim_cfg_ports'.
Generating RTLIL representation for module `\RS_DSP3'.
Generating RTLIL representation for module `\RS_DSP3_MULT'.
Generating RTLIL representation for module `\RS_DSP3_MULT_REGIN'.
Generating RTLIL representation for module `\RS_DSP3_MULT_REGOUT'.
Generating RTLIL representation for module `\RS_DSP3_MULT_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP3_MULTADD'.
Generating RTLIL representation for module `\RS_DSP3_MULTADD_REGIN'.
Generating RTLIL representation for module `\RS_DSP3_MULTADD_REGOUT'.
Generating RTLIL representation for module `\RS_DSP3_MULTADD_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP3_MULTACC'.
Generating RTLIL representation for module `\RS_DSP3_MULTACC_REGIN'.
Generating RTLIL representation for module `\RS_DSP3_MULTACC_REGOUT'.
Generating RTLIL representation for module `\RS_DSP3_MULTACC_REGIN_REGOUT'.
Generating RTLIL representation for module `\dsp_t1_20x18x64_cfg_params'.
Generating RTLIL representation for module `\dsp_t1_10x9x32_cfg_params'.
Generating RTLIL representation for module `\dsp_t1_sim_cfg_params'.
Successfully finished Verilog frontend.

10.4. Executing HIERARCHY pass (managing design hierarchy).

10.4.1. Analyzing design hierarchy..
Top module:  \uart_protocol
Used module:     \BaudTickGen
Used module:     \async_receiver
Used module:     \async_transmitter

10.4.2. Analyzing design hierarchy..
Top module:  \uart_protocol
Used module:     \BaudTickGen
Used module:     \async_receiver
Used module:     \async_transmitter
Removed 0 unused modules.

10.5. Executing PROC pass (convert processes to netlists).

10.5.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

10.5.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

10.5.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

10.5.4. Executing PROC_INIT pass (extract init attributes).

10.5.5. Executing PROC_ARST pass (detect async resets in processes).

10.5.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

10.5.7. Executing PROC_MUX pass (convert decision trees to multiplexers).

10.5.8. Executing PROC_DLATCH pass (convert process syncs to latches).

10.5.9. Executing PROC_DFF pass (convert process syncs to FFs).

10.5.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

10.5.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

10.5.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module async_transmitter.
<suppressed ~3 debug messages>
Optimizing module async_receiver.
<suppressed ~8 debug messages>
Optimizing module BaudTickGen.
Optimizing module uart_protocol.

10.6. Executing DEMUXMAP pass.

10.7. Executing FLATTEN pass (flatten design).
Deleting now unused module BaudTickGen.
Deleting now unused module async_receiver.
Deleting now unused module async_transmitter.
<suppressed ~3 debug messages>

10.8. Executing DEMUXMAP pass.

10.9. Executing TRIBUF pass.

10.10. Executing DEMINOUT pass (demote inout ports to input or output).

10.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module uart_protocol.

10.12. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \uart_protocol..
Removed 10 unused cells and 97 unused wires.
<suppressed ~37 debug messages>

10.13. Executing CHECK pass (checking for obvious problems).
Checking module uart_protocol...
Found and reported 0 problems.

10.14. Executing OPT_EXPR pass (perform const folding).
Optimizing module uart_protocol.

10.15. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\uart_protocol'.
Removed a total of 0 cells.

10.16. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \uart_protocol..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~11 debug messages>

10.17. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \uart_protocol.
Performed a total of 0 changes.

10.18. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\uart_protocol'.
Removed a total of 0 cells.

10.19. Executing OPT_SHARE pass.

10.20. Executing OPT_DFF pass (perform DFF optimizations).
Removing never-active async load on $flatten\async_transmitter_inst.$verific$TxD_state_reg$/nfs_scratch/scratch/AE/Roman/open_source_design/uart_protocol/./transmitter.v:68$243 ($aldff) from module uart_protocol.
Removing never-active async load on $flatten\async_transmitter_inst.$verific$TxD_shift_reg$/nfs_scratch/scratch/AE/Roman/open_source_design/uart_protocol/./transmitter.v:68$242 ($aldff) from module uart_protocol.
Removing never-active async load on $flatten\async_receiver_inst.$verific$RxD_sync_reg$/nfs_scratch/scratch/AE/Roman/open_source_design/uart_protocol/./receiver.v:41$123 ($aldff) from module uart_protocol.
Removing never-active async load on $flatten\async_receiver_inst.$verific$RxD_state_reg$/nfs_scratch/scratch/AE/Roman/open_source_design/uart_protocol/./receiver.v:81$159 ($aldff) from module uart_protocol.
Removing never-active async load on $flatten\async_receiver_inst.$verific$RxD_data_reg$/nfs_scratch/scratch/AE/Roman/open_source_design/uart_protocol/./receiver.v:84$163 ($aldff) from module uart_protocol.
Removing never-active async load on $flatten\async_receiver_inst.$verific$OversamplingCnt_reg$/nfs_scratch/scratch/AE/Roman/open_source_design/uart_protocol/./receiver.v:63$150 ($aldff) from module uart_protocol.
Removing never-active async load on $flatten\async_receiver_inst.$verific$Filter_cnt_reg$/nfs_scratch/scratch/AE/Roman/open_source_design/uart_protocol/./receiver.v:57$143 ($aldff) from module uart_protocol.
Removing never-active async load on $flatten\BaudTickGen_inst.$verific$Acc_reg$/nfs_scratch/scratch/AE/Roman/open_source_design/uart_protocol/./baud_tick_generator.v:14$42 ($aldff) from module uart_protocol.

10.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \uart_protocol..

10.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module uart_protocol.
MAX OPT ITERATION = 1

10.23. Executing FSM pass (extract and optimize FSM).

10.23.1. Executing FSM_DETECT pass (finding FSMs in design).

10.23.2. Executing FSM_EXTRACT pass (extracting FSM from design).

10.23.3. Executing FSM_OPT pass (simple optimizations of FSMs).

10.23.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \uart_protocol..

10.23.5. Executing FSM_OPT pass (simple optimizations of FSMs).

10.23.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

10.23.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

10.23.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

10.24. Executing OPT_EXPR pass (perform const folding).
Optimizing module uart_protocol.

10.25. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\uart_protocol'.
Removed a total of 0 cells.

10.26. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \uart_protocol..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~11 debug messages>

10.27. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \uart_protocol.
Performed a total of 0 changes.

10.28. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\uart_protocol'.
Removed a total of 0 cells.

10.29. Executing OPT_SHARE pass.

10.30. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $flatten\async_transmitter_inst.$verific$TxD_shift_reg$/nfs_scratch/scratch/AE/Roman/open_source_design/uart_protocol/./transmitter.v:68$242 ($dff) from module uart_protocol (D = $flatten\async_transmitter_inst.$verific$n38$197, Q = \async_transmitter_inst.TxD_shift).
Adding EN signal on $flatten\async_receiver_inst.$verific$RxD_sync_reg$/nfs_scratch/scratch/AE/Roman/open_source_design/uart_protocol/./receiver.v:41$123 ($dff) from module uart_protocol (D = { \async_receiver_inst.RxD_sync [0] \RxD }, Q = \async_receiver_inst.RxD_sync).
Adding EN signal on $flatten\async_receiver_inst.$verific$RxD_data_reg$/nfs_scratch/scratch/AE/Roman/open_source_design/uart_protocol/./receiver.v:84$163 ($dff) from module uart_protocol (D = { \async_receiver_inst.RxD_bit \async_receiver_inst.RxD_data [7:1] }, Q = \async_receiver_inst.RxD_data).
Adding EN signal on $flatten\async_receiver_inst.$verific$RxD_bit_reg$/nfs_scratch/scratch/AE/Roman/open_source_design/uart_protocol/./receiver.v:57$144 ($dff) from module uart_protocol (D = $flatten\async_receiver_inst.$verific$n45$58, Q = \async_receiver_inst.RxD_bit).
Adding EN signal on $flatten\async_receiver_inst.$verific$OversamplingCnt_reg$/nfs_scratch/scratch/AE/Roman/open_source_design/uart_protocol/./receiver.v:63$150 ($dff) from module uart_protocol (D = $flatten\async_receiver_inst.$verific$n61$84, Q = \async_receiver_inst.OversamplingCnt).
Adding EN signal on $flatten\async_receiver_inst.$verific$Filter_cnt_reg$/nfs_scratch/scratch/AE/Roman/open_source_design/uart_protocol/./receiver.v:57$143 ($dff) from module uart_protocol (D = $flatten\async_receiver_inst.$verific$n37$81, Q = \async_receiver_inst.Filter_cnt).
Adding EN signal on $flatten\BaudTickGen_inst.$verific$Acc_reg$/nfs_scratch/scratch/AE/Roman/open_source_design/uart_protocol/./baud_tick_generator.v:14$42 ($dff) from module uart_protocol (D = 1'0, Q = \BaudTickGen_inst.Acc [0]).
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$265 ($dffe) from module uart_protocol.

10.31. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \uart_protocol..
Removed 5 unused cells and 5 unused wires.
<suppressed ~6 debug messages>

10.32. Executing OPT_EXPR pass (perform const folding).
Optimizing module uart_protocol.
<suppressed ~3 debug messages>
MAX OPT ITERATION = 1

10.33. Executing WREDUCE pass (reducing word size of cells).
Removed top 1 bits (of 4) from port B of cell uart_protocol.$flatten\async_transmitter_inst.$verific$LessThan_43$/nfs_scratch/scratch/AE/Roman/open_source_design/uart_protocol/./transmitter.v:70$244 ($lt).
Removed top 1 bits (of 2) from port B of cell uart_protocol.$flatten\async_receiver_inst.$verific$add_11$/nfs_scratch/scratch/AE/Roman/open_source_design/uart_protocol/./receiver.v:50$126 ($add).
Removed top 2 bits (of 3) from port B of cell uart_protocol.$flatten\async_receiver_inst.$verific$add_32$/nfs_scratch/scratch/AE/Roman/open_source_design/uart_protocol/./receiver.v:63$146 ($add).
Removed top 1 bits (of 3) from port B of cell uart_protocol.$flatten\async_receiver_inst.$verific$equal_37$/nfs_scratch/scratch/AE/Roman/open_source_design/uart_protocol/./receiver.v:64$151 ($eq).
Removed top 2 bits (of 4) from port B of cell uart_protocol.$flatten\async_receiver_inst.$verific$equal_73$/nfs_scratch/scratch/AE/Roman/open_source_design/uart_protocol/./receiver.v:89$164 ($eq).
Removed top 1 bits (of 2) from port B of cell uart_protocol.$flatten\async_receiver_inst.$verific$sub_16$/nfs_scratch/scratch/AE/Roman/open_source_design/uart_protocol/./receiver.v:52$131 ($sub).
Removed top 7 bits (of 15) from port B of cell uart_protocol.$flatten\BaudTickGen_inst.$verific$add_4$/nfs_scratch/scratch/AE/Roman/open_source_design/uart_protocol/./baud_tick_generator.v:14$40 ($add).

10.34. Executing PEEPOPT pass (run peephole optimizers).

10.35. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \uart_protocol..

10.36. Executing DEMUXMAP pass.

10.37. Printing statistics.

=== uart_protocol ===

   Number of wires:                 92
   Number of wire bits:            278
   Number of public wires:          32
   Number of public wire bits:      86
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 54
     $add                            3
     $and                            9
     $bmux                           2
     $dff                            4
     $dffe                           6
     $eq                             3
     $logic_not                      3
     $lt                             1
     $mux                           12
     $ne                             1
     $not                            2
     $or                             1
     $reduce_and                     2
     $reduce_bool                    4
     $sub                            1

10.38. Executing WREDUCE pass (reducing word size of cells).

10.39. Executing RS_DSP_MACC pass.

10.40. Executing TECHMAP pass (map to technology primitives).

10.40.1. Executing Verilog-2005 frontend: /nfs_cadtools/raptor/08_23_2022_08_00_01/bin/../share/yosys/mul2dsp.v
Parsing Verilog input from `/nfs_cadtools/raptor/08_23_2022_08_00_01/bin/../share/yosys/mul2dsp.v' to AST representation.
Generating RTLIL representation for module `\_80_mul'.
Generating RTLIL representation for module `\_90_soft_mul'.
Successfully finished Verilog frontend.

10.40.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

10.41. Executing TECHMAP pass (map to technology primitives).

10.41.1. Executing Verilog-2005 frontend: /nfs_cadtools/raptor/08_23_2022_08_00_01/bin/../share/yosys/mul2dsp.v
Parsing Verilog input from `/nfs_cadtools/raptor/08_23_2022_08_00_01/bin/../share/yosys/mul2dsp.v' to AST representation.
Generating RTLIL representation for module `\_80_mul'.
Generating RTLIL representation for module `\_90_soft_mul'.
Successfully finished Verilog frontend.

10.41.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

10.42. Executing TECHMAP pass (map to technology primitives).

10.42.1. Executing Verilog-2005 frontend: /nfs_cadtools/raptor/08_23_2022_08_00_01/bin/../share/yosys/rapidsilicon/genesis/dsp_map.v
Parsing Verilog input from `/nfs_cadtools/raptor/08_23_2022_08_00_01/bin/../share/yosys/rapidsilicon/genesis/dsp_map.v' to AST representation.
Generating RTLIL representation for module `\$__RS_MUL20X18'.
Generating RTLIL representation for module `\$__RS_MUL10X9'.
Successfully finished Verilog frontend.

10.42.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

10.43. Executing RS_DSP_SIMD pass.

10.44. Executing TECHMAP pass (map to technology primitives).

10.44.1. Executing Verilog-2005 frontend: /nfs_cadtools/raptor/08_23_2022_08_00_01/bin/../share/yosys/rapidsilicon/genesis/dsp_final_map.v
Parsing Verilog input from `/nfs_cadtools/raptor/08_23_2022_08_00_01/bin/../share/yosys/rapidsilicon/genesis/dsp_final_map.v' to AST representation.
Generating RTLIL representation for module `\dsp_t1_20x18x64_cfg_ports'.
Generating RTLIL representation for module `\dsp_t1_10x9x32_cfg_ports'.
Generating RTLIL representation for module `\dsp_t1_20x18x64_cfg_params'.
Generating RTLIL representation for module `\dsp_t1_10x9x32_cfg_params'.
Successfully finished Verilog frontend.

10.44.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~6 debug messages>

10.45. Executing RS_DSP_IO_REGS pass.

10.46. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module uart_protocol:
  creating $macc model for $flatten\BaudTickGen_inst.$verific$add_4$/nfs_scratch/scratch/AE/Roman/open_source_design/uart_protocol/./baud_tick_generator.v:14$40 ($add).
  creating $macc model for $flatten\async_receiver_inst.$verific$add_11$/nfs_scratch/scratch/AE/Roman/open_source_design/uart_protocol/./receiver.v:50$126 ($add).
  creating $macc model for $flatten\async_receiver_inst.$verific$add_32$/nfs_scratch/scratch/AE/Roman/open_source_design/uart_protocol/./receiver.v:63$146 ($add).
  creating $macc model for $flatten\async_receiver_inst.$verific$sub_16$/nfs_scratch/scratch/AE/Roman/open_source_design/uart_protocol/./receiver.v:52$131 ($sub).
  creating $alu model for $macc $flatten\async_receiver_inst.$verific$sub_16$/nfs_scratch/scratch/AE/Roman/open_source_design/uart_protocol/./receiver.v:52$131.
  creating $alu model for $macc $flatten\async_receiver_inst.$verific$add_32$/nfs_scratch/scratch/AE/Roman/open_source_design/uart_protocol/./receiver.v:63$146.
  creating $alu model for $macc $flatten\async_receiver_inst.$verific$add_11$/nfs_scratch/scratch/AE/Roman/open_source_design/uart_protocol/./receiver.v:50$126.
  creating $alu model for $macc $flatten\BaudTickGen_inst.$verific$add_4$/nfs_scratch/scratch/AE/Roman/open_source_design/uart_protocol/./baud_tick_generator.v:14$40.
  creating $alu model for $flatten\async_transmitter_inst.$verific$LessThan_43$/nfs_scratch/scratch/AE/Roman/open_source_design/uart_protocol/./transmitter.v:70$244 ($lt): new $alu
  creating $alu cell for $flatten\async_transmitter_inst.$verific$LessThan_43$/nfs_scratch/scratch/AE/Roman/open_source_design/uart_protocol/./transmitter.v:70$244: $auto$alumacc.cc:485:replace_alu$268
  creating $alu cell for $flatten\BaudTickGen_inst.$verific$add_4$/nfs_scratch/scratch/AE/Roman/open_source_design/uart_protocol/./baud_tick_generator.v:14$40: $auto$alumacc.cc:485:replace_alu$279
  creating $alu cell for $flatten\async_receiver_inst.$verific$add_11$/nfs_scratch/scratch/AE/Roman/open_source_design/uart_protocol/./receiver.v:50$126: $auto$alumacc.cc:485:replace_alu$282
  creating $alu cell for $flatten\async_receiver_inst.$verific$add_32$/nfs_scratch/scratch/AE/Roman/open_source_design/uart_protocol/./receiver.v:63$146: $auto$alumacc.cc:485:replace_alu$285
  creating $alu cell for $flatten\async_receiver_inst.$verific$sub_16$/nfs_scratch/scratch/AE/Roman/open_source_design/uart_protocol/./receiver.v:52$131: $auto$alumacc.cc:485:replace_alu$288
  created 5 $alu and 0 $macc cells.

10.47. Executing OPT_EXPR pass (perform const folding).
Optimizing module uart_protocol.

10.48. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\uart_protocol'.
Removed a total of 0 cells.

10.49. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \uart_protocol..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~9 debug messages>

10.50. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \uart_protocol.
Performed a total of 0 changes.

10.51. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\uart_protocol'.
Removed a total of 0 cells.

10.52. Executing OPT_SHARE pass.

10.53. Executing OPT_DFF pass (perform DFF optimizations).

10.54. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \uart_protocol..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

10.55. Executing OPT_EXPR pass (perform const folding).
Optimizing module uart_protocol.
MAX OPT ITERATION = 1

10.56. Printing statistics.

=== uart_protocol ===

   Number of wires:                106
   Number of wire bits:            339
   Number of public wires:          32
   Number of public wire bits:      86
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 58
     $alu                            5
     $and                            9
     $bmux                           2
     $dff                            4
     $dffe                           6
     $eq                             3
     $logic_not                      3
     $mux                           12
     $ne                             1
     $not                            4
     $or                             2
     $reduce_and                     3
     $reduce_bool                    4

10.57. Executing MEMORY pass.

10.57.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

10.57.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

10.57.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

10.57.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

10.57.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

10.57.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \uart_protocol..

10.57.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

10.57.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

10.57.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \uart_protocol..

10.57.10. Executing MEMORY_COLLECT pass (generating $mem cells).

10.58. Printing statistics.

=== uart_protocol ===

   Number of wires:                106
   Number of wire bits:            339
   Number of public wires:          32
   Number of public wire bits:      86
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 58
     $alu                            5
     $and                            9
     $bmux                           2
     $dff                            4
     $dffe                           6
     $eq                             3
     $logic_not                      3
     $mux                           12
     $ne                             1
     $not                            4
     $or                             2
     $reduce_and                     3
     $reduce_bool                    4

10.59. Executing MUXPACK pass ($mux cell cascades to $pmux).
Converting uart_protocol.$flatten\async_receiver_inst.$verific$i25$/nfs_scratch/scratch/AE/Roman/open_source_design/uart_protocol/./receiver.v:56$139 ... uart_protocol.$flatten\async_receiver_inst.$verific$i26$/nfs_scratch/scratch/AE/Roman/open_source_design/uart_protocol/./receiver.v:56$140 to a pmux with 2 cases.
Converted 2 (p)mux cells into 1 pmux cells.
<suppressed ~12 debug messages>

10.60. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \uart_protocol..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

10.61. Executing MEMORY_BRAM pass (mapping $mem cells to block memories).

10.62. Executing TECHMAP pass (map to technology primitives).

10.62.1. Executing Verilog-2005 frontend: /nfs_cadtools/raptor/08_23_2022_08_00_01/bin/../share/yosys/rapidsilicon/genesis/brams_map.v
Parsing Verilog input from `/nfs_cadtools/raptor/08_23_2022_08_00_01/bin/../share/yosys/rapidsilicon/genesis/brams_map.v' to AST representation.
Generating RTLIL representation for module `\$__RS_FACTOR_BRAM36_TDP'.
Generating RTLIL representation for module `\$__RS_FACTOR_BRAM18_TDP'.
/nfs_cadtools/raptor/08_23_2022_08_00_01/bin/../share/yosys/rapidsilicon/genesis/brams_map.v:236: Warning: Range [2:0] select out of bounds on signal `\DOP': Setting 1 MSB bits to undef.
Generating RTLIL representation for module `\$__RS_FACTOR_BRAM36_SDP'.
Successfully finished Verilog frontend.

10.62.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~5 debug messages>

10.63. Executing PMUXTREE pass.

10.64. Executing MUXPACK pass ($mux cell cascades to $pmux).
Converted 0 (p)mux cells into 0 pmux cells.
<suppressed ~11 debug messages>

10.65. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

10.66. Printing statistics.

=== uart_protocol ===

   Number of wires:                106
   Number of wire bits:            339
   Number of public wires:          32
   Number of public wire bits:      86
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 57
     $alu                            5
     $and                            9
     $bmux                           2
     $dff                            4
     $dffe                           6
     $eq                             3
     $logic_not                      3
     $mux                           11
     $ne                             1
     $not                            4
     $or                             2
     $reduce_and                     3
     $reduce_bool                    4

10.67. Executing TECHMAP pass (map to technology primitives).

10.67.1. Executing Verilog-2005 frontend: /nfs_cadtools/raptor/08_23_2022_08_00_01/bin/../share/yosys/techmap.v
Parsing Verilog input from `/nfs_cadtools/raptor/08_23_2022_08_00_01/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

10.67.2. Executing Verilog-2005 frontend: /nfs_cadtools/raptor/08_23_2022_08_00_01/bin/../share/yosys/rapidsilicon/genesis/arith_map.v
Parsing Verilog input from `/nfs_cadtools/raptor/08_23_2022_08_00_01/bin/../share/yosys/rapidsilicon/genesis/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_rs_alu'.
Successfully finished Verilog frontend.

10.67.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $reduce_bool.
Using template $paramod$23e22f8f03f64c3443063aae65394c1c2e69e4ef\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $dffe.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $bmux.
Using template $paramod$3ef7d3dd227da7627a99c5e5a6a4deb817573e39\_90_alu for cells of type $alu.
Using template $paramod$ba698a254f9a5947e85cbe7beae6b161eefc5386\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $eq.
Using template $paramod$1a3a0c35c4a4896fbfd612699525c057298e72d2\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $ne.
Using template $paramod$175e67c02b86e96b1288b9dc100122520d7240d8\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $xor.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010000 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000011 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000010 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000100 for cells of type $lcu.
No more expansions possible.
<suppressed ~955 debug messages>

10.68. Printing statistics.

=== uart_protocol ===

   Number of wires:                328
   Number of wire bits:           6518
   Number of public wires:          32
   Number of public wire bits:      86
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                591
     $_AND_                         92
     $_DFFE_PP_                     24
     $_DFF_P_                       25
     $_MUX_                        284
     $_NOT_                         37
     $_OR_                          59
     $_XOR_                         70

10.69. Executing OPT_EXPR pass (perform const folding).
Optimizing module uart_protocol.
<suppressed ~177 debug messages>

10.70. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\uart_protocol'.
<suppressed ~336 debug messages>
Removed a total of 112 cells.

10.71. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \uart_protocol..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

10.72. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \uart_protocol.
Performed a total of 0 changes.

10.73. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\uart_protocol'.
Removed a total of 0 cells.

10.74. Executing OPT_SHARE pass.

10.75. Executing OPT_DFF pass (perform DFF optimizations).

10.76. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \uart_protocol..
Removed 21 unused cells and 226 unused wires.
<suppressed ~22 debug messages>

10.77. Executing OPT_EXPR pass (perform const folding).
Optimizing module uart_protocol.
<suppressed ~20 debug messages>

10.78. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \uart_protocol..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

10.79. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \uart_protocol.
Performed a total of 0 changes.

10.80. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\uart_protocol'.
Removed a total of 0 cells.

10.81. Executing OPT_SHARE pass.

10.82. Executing OPT_DFF pass (perform DFF optimizations).

10.83. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \uart_protocol..
Removed 0 unused cells and 3 unused wires.
<suppressed ~1 debug messages>

10.84. Executing OPT_EXPR pass (perform const folding).
Optimizing module uart_protocol.
MAX OPT ITERATION = 2

10.85. Executing OPT_EXPR pass (perform const folding).
Optimizing module uart_protocol.
<suppressed ~37 debug messages>

10.86. Executing TECHMAP pass (map to technology primitives).

10.86.1. Executing Verilog-2005 frontend: /nfs_cadtools/raptor/08_23_2022_08_00_01/bin/../share/yosys/techmap.v
Parsing Verilog input from `/nfs_cadtools/raptor/08_23_2022_08_00_01/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

10.86.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~71 debug messages>

10.87. Executing OPT_EXPR pass (perform const folding).
Optimizing module uart_protocol.

10.88. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\uart_protocol'.
Removed a total of 0 cells.

10.89. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \uart_protocol..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

10.90. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \uart_protocol.
Performed a total of 0 changes.

10.91. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\uart_protocol'.
Removed a total of 0 cells.

10.92. Executing OPT_DFF pass (perform DFF optimizations).

10.93. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \uart_protocol..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

10.94. Executing OPT_EXPR pass (perform const folding).
Optimizing module uart_protocol.
MAX OPT ITERATION = 1

10.95. Executing ABC pass (technology mapping using ABC).

10.95.1. Summary of detected clock domains:
  17 cells in clk=\clock0, en=$flatten\async_receiver_inst.$verific$n208$63, arst={ }, srst={ }
  10 cells in clk=\clock0, en=$auto$opt_dff.cc:219:make_patterns_logic$257, arst={ }, srst={ }
  10 cells in clk=\clock0, en=$auto$opt_dff.cc:219:make_patterns_logic$263, arst={ }, srst={ }
  12 cells in clk=\clock0, en=$auto$opt_dff.cc:194:make_patterns_logic$250, arst={ }, srst={ }
  204 cells in clk=\clock0, en={ }, arst={ }, srst={ }
  19 cells in clk=\clock0, en=\BaudTickGen_inst.Acc [16], arst={ }, srst={ }

10.95.2. Extracting gate netlist of module `\uart_protocol' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock0, enabled by $flatten\async_receiver_inst.$verific$n208$63
Extracted 17 gates and 29 wires to a netlist network with 11 inputs and 9 outputs.

10.95.2.1. Executing ABC.

10.95.3. Extracting gate netlist of module `\uart_protocol' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock0, enabled by $auto$opt_dff.cc:219:make_patterns_logic$257
Extracted 10 gates and 17 wires to a netlist network with 7 inputs and 4 outputs.

10.95.3.1. Executing ABC.

10.95.4. Extracting gate netlist of module `\uart_protocol' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock0, enabled by $auto$opt_dff.cc:219:make_patterns_logic$263
Extracted 10 gates and 14 wires to a netlist network with 4 inputs and 5 outputs.

10.95.4.1. Executing ABC.

10.95.5. Extracting gate netlist of module `\uart_protocol' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock0, enabled by $auto$opt_dff.cc:194:make_patterns_logic$250
Extracted 12 gates and 24 wires to a netlist network with 12 inputs and 9 outputs.

10.95.5.1. Executing ABC.

10.95.6. Extracting gate netlist of module `\uart_protocol' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock0
Extracted 204 gates and 210 wires to a netlist network with 4 inputs and 11 outputs.

10.95.6.1. Executing ABC.

10.95.7. Extracting gate netlist of module `\uart_protocol' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock0, enabled by $abc$1385$lo19
Extracted 19 gates and 24 wires to a netlist network with 5 inputs and 4 outputs.

10.95.7.1. Executing ABC.

10.96. Executing ABC pass (technology mapping using ABC).

10.96.1. Summary of detected clock domains:
  5 cells in clk=\clock0, en=$abc$1335$auto$opt_dff.cc:219:make_patterns_logic$257, arst={ }, srst={ }
  11 cells in clk=\clock0, en=$abc$1345$auto$opt_dff.cc:219:make_patterns_logic$263, arst={ }, srst={ }
  17 cells in clk=\clock0, en=$abc$1358$auto$opt_dff.cc:194:make_patterns_logic$250, arst={ }, srst={ }
  10 cells in clk=\clock0, en=$abc$1309$flatten\async_receiver_inst.$verific$n208$63, arst={ }, srst={ }
  145 cells in clk=\clock0, en={ }, arst={ }, srst={ }
  17 cells in clk=\clock0, en=$abc$1385$lo19, arst={ }, srst={ }

10.96.2. Extracting gate netlist of module `\uart_protocol' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock0, enabled by $abc$1335$auto$opt_dff.cc:219:make_patterns_logic$257
Extracted 5 gates and 11 wires to a netlist network with 6 inputs and 4 outputs.

10.96.2.1. Executing ABC.

10.96.3. Extracting gate netlist of module `\uart_protocol' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock0, enabled by $abc$1345$auto$opt_dff.cc:219:make_patterns_logic$263
Extracted 11 gates and 14 wires to a netlist network with 3 inputs and 4 outputs.

10.96.3.1. Executing ABC.

10.96.4. Extracting gate netlist of module `\uart_protocol' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock0, enabled by $abc$1358$auto$opt_dff.cc:194:make_patterns_logic$250
Extracted 17 gates and 27 wires to a netlist network with 10 inputs and 2 outputs.

10.96.4.1. Executing ABC.

10.96.5. Extracting gate netlist of module `\uart_protocol' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock0, enabled by $abc$1309$flatten\async_receiver_inst.$verific$n208$63
Extracted 10 gates and 13 wires to a netlist network with 3 inputs and 10 outputs.

10.96.5.1. Executing ABC.

10.96.6. Extracting gate netlist of module `\uart_protocol' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock0
Extracted 145 gates and 150 wires to a netlist network with 5 inputs and 8 outputs.

10.96.6.1. Executing ABC.

10.96.7. Extracting gate netlist of module `\uart_protocol' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock0, enabled by $abc$1619$lo00
Extracted 17 gates and 20 wires to a netlist network with 3 inputs and 4 outputs.

10.96.7.1. Executing ABC.

10.97. Executing ABC pass (technology mapping using ABC).

10.97.1. Summary of detected clock domains:
  3 cells in clk=\clock0, en=$abc$1552$abc$1335$auto$opt_dff.cc:219:make_patterns_logic$257, arst={ }, srst={ }
  9 cells in clk=\clock0, en=$abc$1560$abc$1345$auto$opt_dff.cc:219:make_patterns_logic$263, arst={ }, srst={ }
  16 cells in clk=\clock0, en=$abc$1573$abc$1358$auto$opt_dff.cc:194:make_patterns_logic$250, arst={ }, srst={ }
  12 cells in clk=\clock0, en=$abc$1592$abc$1309$flatten\async_receiver_inst.$verific$n208$63, arst={ }, srst={ }
  146 cells in clk=\clock0, en={ }, arst={ }, srst={ }
  17 cells in clk=\clock0, en=$abc$1619$lo00, arst={ }, srst={ }

10.97.2. Extracting gate netlist of module `\uart_protocol' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock0, enabled by $abc$1552$abc$1335$auto$opt_dff.cc:219:make_patterns_logic$257
Extracted 3 gates and 5 wires to a netlist network with 2 inputs and 2 outputs.

10.97.2.1. Executing ABC.

10.97.3. Extracting gate netlist of module `\uart_protocol' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock0, enabled by $abc$1560$abc$1345$auto$opt_dff.cc:219:make_patterns_logic$263
Extracted 9 gates and 10 wires to a netlist network with 1 inputs and 3 outputs.

10.97.3.1. Executing ABC.

10.97.4. Extracting gate netlist of module `\uart_protocol' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock0, enabled by $abc$1573$abc$1358$auto$opt_dff.cc:194:make_patterns_logic$250
Extracted 16 gates and 28 wires to a netlist network with 12 inputs and 4 outputs.

10.97.4.1. Executing ABC.

10.97.5. Extracting gate netlist of module `\uart_protocol' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock0, enabled by $abc$1592$abc$1309$flatten\async_receiver_inst.$verific$n208$63
Extracted 12 gates and 18 wires to a netlist network with 6 inputs and 9 outputs.

10.97.5.1. Executing ABC.

10.97.6. Extracting gate netlist of module `\uart_protocol' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock0
Extracted 146 gates and 154 wires to a netlist network with 8 inputs and 11 outputs.

10.97.6.1. Executing ABC.

10.97.7. Extracting gate netlist of module `\uart_protocol' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock0, enabled by $abc$1843$lo23
Extracted 17 gates and 21 wires to a netlist network with 4 inputs and 4 outputs.

10.97.7.1. Executing ABC.

10.98. Executing ABC pass (technology mapping using ABC).

10.98.1. Summary of detected clock domains:
  12 cells in clk=\clock0, en=$abc$1817$abc$1592$abc$1309$flatten\async_receiver_inst.$verific$n208$63, arst={ }, srst={ }
  12 cells in clk=\clock0, en=$abc$1843$abc$1560$abc$1345$auto$opt_dff.cc:219:make_patterns_logic$263, arst={ }, srst={ }
  15 cells in clk=\clock0, en=$abc$1796$abc$1573$abc$1358$auto$opt_dff.cc:194:make_patterns_logic$250, arst={ }, srst={ }
  6 cells in clk=\clock0, en=$abc$1843$abc$1552$abc$1335$auto$opt_dff.cc:219:make_patterns_logic$257, arst={ }, srst={ }
  140 cells in clk=\clock0, en={ }, arst={ }, srst={ }
  17 cells in clk=\clock0, en=$abc$1843$lo23, arst={ }, srst={ }

10.98.2. Extracting gate netlist of module `\uart_protocol' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock0, enabled by $abc$1817$abc$1592$abc$1309$flatten\async_receiver_inst.$verific$n208$63
Extracted 12 gates and 18 wires to a netlist network with 6 inputs and 9 outputs.

10.98.2.1. Executing ABC.

10.98.3. Extracting gate netlist of module `\uart_protocol' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock0, enabled by $abc$1843$abc$1560$abc$1345$auto$opt_dff.cc:219:make_patterns_logic$263
Extracted 12 gates and 15 wires to a netlist network with 3 inputs and 4 outputs.

10.98.3.1. Executing ABC.

10.98.4. Extracting gate netlist of module `\uart_protocol' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock0, enabled by $abc$1796$abc$1573$abc$1358$auto$opt_dff.cc:194:make_patterns_logic$250
Extracted 15 gates and 25 wires to a netlist network with 10 inputs and 4 outputs.

10.98.4.1. Executing ABC.

10.98.5. Extracting gate netlist of module `\uart_protocol' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock0, enabled by $abc$1843$abc$1552$abc$1335$auto$opt_dff.cc:219:make_patterns_logic$257
Extracted 6 gates and 12 wires to a netlist network with 6 inputs and 4 outputs.

10.98.5.1. Executing ABC.

10.98.6. Extracting gate netlist of module `\uart_protocol' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock0
Extracted 140 gates and 145 wires to a netlist network with 5 inputs and 8 outputs.

10.98.6.1. Executing ABC.

10.98.7. Extracting gate netlist of module `\uart_protocol' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock0, enabled by $abc$2079$lo06
Extracted 17 gates and 21 wires to a netlist network with 4 inputs and 4 outputs.

10.98.7.1. Executing ABC.

10.99. Executing OPT_FFINV pass (push inverters through FFs).
Discovering LUTs.
Pushed 0 inverters.

10.100. Executing OPT_EXPR pass (perform const folding).
Optimizing module uart_protocol.

10.101. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\uart_protocol'.
<suppressed ~9 debug messages>
Removed a total of 3 cells.

10.102. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \uart_protocol..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

10.103. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \uart_protocol.
Performed a total of 0 changes.

10.104. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\uart_protocol'.
Removed a total of 0 cells.

10.105. Executing OPT_SHARE pass.

10.106. Executing OPT_DFF pass (perform DFF optimizations).

10.107. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \uart_protocol..
Removed 0 unused cells and 948 unused wires.
<suppressed ~9 debug messages>

10.108. Executing OPT_EXPR pass (perform const folding).
Optimizing module uart_protocol.
MAX OPT ITERATION = 1

10.109. Executing BMUXMAP pass.

10.110. Executing DEMUXMAP pass.

10.111. Executing ABC pass (technology mapping using ABC).

10.111.1. Extracting gate netlist of module `\uart_protocol' to `<abc-temp-dir>/input.blif'..
Extracted 150 gates and 200 wires to a netlist network with 50 inputs and 47 outputs.

10.111.1.1. Executing ABC.
DE:   #PIs =  50  #Luts =    53  Max Lvl =   3  Avg Lvl =   1.55  [   0.04 sec. at Pass 0]
DE:   #PIs =  50  #Luts =    56  Max Lvl =   2  Avg Lvl =   1.43  [   0.11 sec. at Pass 1]
DE:   #PIs =  50  #Luts =    56  Max Lvl =   2  Avg Lvl =   1.43  [   0.10 sec. at Pass 2]
DE:   #PIs =  50  #Luts =    56  Max Lvl =   2  Avg Lvl =   1.43  [   0.06 sec. at Pass 3]
DE:   #PIs =  50  #Luts =    56  Max Lvl =   2  Avg Lvl =   1.43  [   0.10 sec. at Pass 4]
DE:   #PIs =  50  #Luts =    56  Max Lvl =   2  Avg Lvl =   1.43  [   0.09 sec. at Pass 5]
DE:   #PIs =  50  #Luts =    56  Max Lvl =   2  Avg Lvl =   1.43  [   0.00 sec. at Pass 6]
DE:   #PIs =  50  #Luts =    56  Max Lvl =   2  Avg Lvl =   1.43  [   0.00 sec. at Pass 7]

10.112. Executing OPT_EXPR pass (perform const folding).
Optimizing module uart_protocol.

10.113. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\uart_protocol'.
Removed a total of 0 cells.

10.114. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \uart_protocol..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

10.115. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \uart_protocol.
Performed a total of 0 changes.

10.116. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\uart_protocol'.
Removed a total of 0 cells.

10.117. Executing OPT_SHARE pass.

10.118. Executing OPT_DFF pass (perform DFF optimizations).

10.119. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \uart_protocol..
Removed 0 unused cells and 199 unused wires.
<suppressed ~2 debug messages>

10.120. Executing OPT_EXPR pass (perform const folding).
Optimizing module uart_protocol.
MAX OPT ITERATION = 1

10.121. Executing OPT_FFINV pass (push inverters through FFs).
Discovering LUTs.
Pushed 0 inverters.

10.122. Printing statistics.

=== uart_protocol ===

   Number of wires:                122
   Number of wire bits:            142
   Number of public wires:          23
   Number of public wire bits:      43
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                105
     $_DFFE_PP_                     24
     $_DFF_P_                       25
     $lut                           56

10.123. Executing SHREGMAP pass (map shift registers).
Converted 0 dff cells into 0 shift registers.

10.124. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).

10.125. Printing statistics.

=== uart_protocol ===

   Number of wires:                122
   Number of wire bits:            142
   Number of public wires:          23
   Number of public wire bits:      43
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                105
     $_DFFE_PP0P_                   24
     $_DFF_P_                       25
     $lut                           56

10.126. Executing TECHMAP pass (map to technology primitives).

10.126.1. Executing Verilog-2005 frontend: /nfs_cadtools/raptor/08_23_2022_08_00_01/bin/../share/yosys/techmap.v
Parsing Verilog input from `/nfs_cadtools/raptor/08_23_2022_08_00_01/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

10.126.2. Executing Verilog-2005 frontend: /nfs_cadtools/raptor/08_23_2022_08_00_01/bin/../share/yosys/rapidsilicon/genesis/ffs_map.v
Parsing Verilog input from `/nfs_cadtools/raptor/08_23_2022_08_00_01/bin/../share/yosys/rapidsilicon/genesis/ffs_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_PP0P_'.
Generating RTLIL representation for module `\$_DFFE_PP0N_'.
Generating RTLIL representation for module `\$_DFFE_PN0P_'.
Generating RTLIL representation for module `\$_DFFE_PN0N_'.
Generating RTLIL representation for module `\$_DFFE_PP1P_'.
Generating RTLIL representation for module `\$_DFFE_PP1N_'.
Generating RTLIL representation for module `\$_DFFE_PN1P_'.
Generating RTLIL representation for module `\$_DFFE_PN1N_'.
Generating RTLIL representation for module `\$_DFFSR_PPP_'.
Generating RTLIL representation for module `\$_DFFSR_PNP_'.
Generating RTLIL representation for module `\$_DFFSR_PNN_'.
Generating RTLIL representation for module `\$_DFFSR_PPN_'.
Generating RTLIL representation for module `\$_DFFSR_NPP_'.
Generating RTLIL representation for module `\$_DFFSR_NNP_'.
Generating RTLIL representation for module `\$_DFFSR_NNN_'.
Generating RTLIL representation for module `\$_DFFSR_NPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PPPP_'.
Generating RTLIL representation for module `\$_DFFSRE_PNPP_'.
Generating RTLIL representation for module `\$_DFFSRE_PPNP_'.
Generating RTLIL representation for module `\$_DFFSRE_PNNP_'.
Generating RTLIL representation for module `\$_DFFSRE_PPPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PNPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PPNN_'.
Generating RTLIL representation for module `\$_DFFSRE_PNNN_'.
Generating RTLIL representation for module `\$_DLATCHSR_PPP_'.
Generating RTLIL representation for module `\$_DLATCHSR_NPP_'.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_NP0P_'.
Generating RTLIL representation for module `\$_DFFE_NP0N_'.
Generating RTLIL representation for module `\$_DFFE_NN0P_'.
Generating RTLIL representation for module `\$_DFFE_NN0N_'.
Generating RTLIL representation for module `\$_DFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFFE_NP1N_'.
Generating RTLIL representation for module `\$_DFFE_NN1P_'.
Generating RTLIL representation for module `\$_DFFE_NN1N_'.
Generating RTLIL representation for module `\$_DFFSRE_NPPP_'.
Generating RTLIL representation for module `\$_DFFSRE_NNPP_'.
Generating RTLIL representation for module `\$_DFFSRE_NPNP_'.
Generating RTLIL representation for module `\$_DFFSRE_NNNP_'.
Generating RTLIL representation for module `\$_DFFSRE_NPPN_'.
Generating RTLIL representation for module `\$_DFFSRE_NNPN_'.
Generating RTLIL representation for module `\$_DFFSRE_NPNN_'.
Generating RTLIL representation for module `\$_DFFSRE_NNNN_'.
Generating RTLIL representation for module `\$__SHREG_DFF_P_'.
Generating RTLIL representation for module `\$_SDFF_PP0_'.
Generating RTLIL representation for module `\$_SDFF_PN0_'.
Generating RTLIL representation for module `\$_SDFF_NP0_'.
Generating RTLIL representation for module `\$_SDFF_NN0_'.
Generating RTLIL representation for module `\$_SDFF_PP1_'.
Generating RTLIL representation for module `\$_SDFF_PN1_'.
Generating RTLIL representation for module `\$_SDFF_NP1_'.
Generating RTLIL representation for module `\$_SDFF_NN1_'.
Successfully finished Verilog frontend.

10.126.3. Continuing TECHMAP pass.
Using template \$_DFFE_PP0P_ for cells of type $_DFFE_PP0P_.
Using template \$_DFF_P_ for cells of type $_DFF_P_.
Using extmapper simplemap for cells of type $lut.
Using extmapper simplemap for cells of type $logic_not.
No more expansions possible.
<suppressed ~265 debug messages>

10.127. Executing OPT_EXPR pass (perform const folding).
Optimizing module uart_protocol.
<suppressed ~1203 debug messages>

10.128. Executing SIMPLEMAP pass (map simple cells to gate primitives).

10.129. Executing OPT_EXPR pass (perform const folding).
Optimizing module uart_protocol.

10.130. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\uart_protocol'.
<suppressed ~246 debug messages>
Removed a total of 82 cells.

10.131. Executing OPT_DFF pass (perform DFF optimizations).

10.132. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \uart_protocol..
Removed 0 unused cells and 348 unused wires.
<suppressed ~1 debug messages>

10.133. Executing OPT_EXPR pass (perform const folding).
Optimizing module uart_protocol.
<suppressed ~5 debug messages>

10.134. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\uart_protocol'.
Removed a total of 0 cells.

10.135. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \uart_protocol..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

10.136. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \uart_protocol.
Performed a total of 0 changes.

10.137. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\uart_protocol'.
Removed a total of 0 cells.

10.138. Executing OPT_SHARE pass.

10.139. Executing OPT_DFF pass (perform DFF optimizations).

10.140. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \uart_protocol..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

10.141. Executing OPT_EXPR pass (perform const folding).
Optimizing module uart_protocol.
MAX OPT ITERATION = 1

10.142. Executing ABC pass (technology mapping using ABC).

10.142.1. Extracting gate netlist of module `\uart_protocol' to `<abc-temp-dir>/input.blif'..
Extracted 200 gates and 252 wires to a netlist network with 50 inputs and 47 outputs.

10.142.1.1. Executing ABC.
DE:   #PIs =  50  #Luts =    56  Max Lvl =   2  Avg Lvl =   1.43  [   0.04 sec. at Pass 0]
DE:   #PIs =  50  #Luts =    56  Max Lvl =   2  Avg Lvl =   1.43  [   0.12 sec. at Pass 1]
DE:   #PIs =  50  #Luts =    56  Max Lvl =   2  Avg Lvl =   1.43  [   0.09 sec. at Pass 2]
DE:   #PIs =  50  #Luts =    56  Max Lvl =   2  Avg Lvl =   1.43  [   0.07 sec. at Pass 3]
DE:   #PIs =  50  #Luts =    56  Max Lvl =   2  Avg Lvl =   1.43  [   0.10 sec. at Pass 4]
DE:   #PIs =  50  #Luts =    56  Max Lvl =   2  Avg Lvl =   1.43  [   0.09 sec. at Pass 5]
DE:   #PIs =  50  #Luts =    56  Max Lvl =   2  Avg Lvl =   1.43  [   0.00 sec. at Pass 6]
DE:   #PIs =  50  #Luts =    56  Max Lvl =   2  Avg Lvl =   1.43  [   0.00 sec. at Pass 7]

10.143. Executing OPT_EXPR pass (perform const folding).
Optimizing module uart_protocol.

10.144. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\uart_protocol'.
Removed a total of 0 cells.

10.145. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \uart_protocol..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

10.146. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \uart_protocol.
Performed a total of 0 changes.

10.147. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\uart_protocol'.
Removed a total of 0 cells.

10.148. Executing OPT_SHARE pass.

10.149. Executing OPT_DFF pass (perform DFF optimizations).

10.150. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \uart_protocol..
Removed 0 unused cells and 206 unused wires.
<suppressed ~1 debug messages>

10.151. Executing OPT_EXPR pass (perform const folding).
Optimizing module uart_protocol.
MAX OPT ITERATION = 1

10.152. Executing HIERARCHY pass (managing design hierarchy).

10.152.1. Analyzing design hierarchy..
Top module:  \uart_protocol

10.152.2. Analyzing design hierarchy..
Top module:  \uart_protocol
Removed 0 unused modules.

10.153. Printing statistics.

=== uart_protocol ===

   Number of wires:                122
   Number of wire bits:            142
   Number of public wires:          23
   Number of public wire bits:      43
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                105
     $lut                           56
     dffsre                         49

10.154. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \uart_protocol..
Removed 0 unused cells and 14 unused wires.
<suppressed ~14 debug messages>

11. Executing BLIF backend.

12. Executing Verilog backend.
Dumping module `\uart_protocol'.

Warnings: 2 unique messages, 2 total
End of script. Logfile hash: dcf85a4a16, CPU: user 0.86s system 0.08s, MEM: 26.89 MB peak
Yosys 0.18+10 (git sha1 c98b0e94e, gcc 9.4.0 -fPIC -Os)
Time spent: 90% 6x abc (7 sec), 2% 32x opt_expr (0 sec), ...
