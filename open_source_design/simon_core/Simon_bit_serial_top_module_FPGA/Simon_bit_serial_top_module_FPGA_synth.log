
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys-Verific 0.0.68
 Yosys 0.18+10 (git sha1 c98b0e94e, gcc 9.4.0 -fPIC -Os)


-- Executing script file `Simon_bit_serial_top_module_FPGA.ys' --

1. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific May22_SW_Release, released at Wed Jun  1 05:39:28 2022.

2. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific May22_SW_Release, released at Wed Jun  1 05:39:28 2022.

3. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific May22_SW_Release, released at Wed Jun  1 05:39:28 2022.

4. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific May22_SW_Release, released at Wed Jun  1 05:39:28 2022.
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file '/nfs_scratch/scratch/AE/Roman/open_source_design/simon_core/./Simon_bit_serial_top_module_FPGA.v'

5. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific May22_SW_Release, released at Wed Jun  1 05:39:28 2022.
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file '/nfs_scratch/scratch/AE/Roman/open_source_design/simon_core/./Simon_bit_serial_datapath_FPGA.v'

6. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific May22_SW_Release, released at Wed Jun  1 05:39:28 2022.
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file '/nfs_scratch/scratch/AE/Roman/open_source_design/simon_core/./Simon_bit_serial_key_expansion_FPGA.v'

7. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific May22_SW_Release, released at Wed Jun  1 05:39:28 2022.
Adding Verilog module 'Simon_bit_serial_top_module_FPGA' to elaboration queue.
Running hier_tree::Elaborate().
VERIFIC-INFO [VERI-1018] /nfs_scratch/scratch/AE/Roman/open_source_design/simon_core/./Simon_bit_serial_top_module_FPGA.v:21: compiling module 'Simon_bit_serial_top_module_FPGA'
VERIFIC-INFO [VERI-1018] /nfs_scratch/scratch/AE/Roman/open_source_design/simon_core/./Simon_bit_serial_datapath_FPGA.v:21: compiling module 'simon_datapath_shiftreg'
VERIFIC-WARNING [VERI-1209] /nfs_scratch/scratch/AE/Roman/open_source_design/simon_core/./Simon_bit_serial_datapath_FPGA.v:215: expression size 7 truncated to fit in target size 6
VERIFIC-INFO [VERI-1018] /nfs_scratch/scratch/AE/Roman/open_source_design/simon_core/./Simon_bit_serial_key_expansion_FPGA.v:22: compiling module 'simon_key_expansion_shiftreg'
VERIFIC-WARNING [VERI-1220] /nfs_scratch/scratch/AE/Roman/open_source_design/simon_core/./Simon_bit_serial_key_expansion_FPGA.v:51: using initial value of 'Z' since it is never assigned
VERIFIC-WARNING [VERI-1209] /nfs_scratch/scratch/AE/Roman/open_source_design/simon_core/./Simon_bit_serial_key_expansion_FPGA.v:210: expression size 8 truncated to fit in target size 7
Importing module Simon_bit_serial_top_module_FPGA.
Importing module simon_datapath_shiftreg.
Importing module simon_key_expansion_shiftreg.

8. Executing HIERARCHY pass (managing design hierarchy).

8.1. Analyzing design hierarchy..
Top module:  \Simon_bit_serial_top_module_FPGA
Used module:     \simon_key_expansion_shiftreg
Used module:     \simon_datapath_shiftreg

8.2. Analyzing design hierarchy..
Top module:  \Simon_bit_serial_top_module_FPGA
Used module:     \simon_key_expansion_shiftreg
Used module:     \simon_datapath_shiftreg
Removed 0 unused modules.

9. Executing synth_rs pass: v0.4.68

9.1. Executing Verilog-2005 frontend: /nfs_cadtools/raptor/08_23_2022_08_00_01/bin/../share/yosys/rapidsilicon/common/cells_sim.v
Parsing Verilog input from `/nfs_cadtools/raptor/08_23_2022_08_00_01/bin/../share/yosys/rapidsilicon/common/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\inv'.
Generating RTLIL representation for module `\buff'.
Generating RTLIL representation for module `\logic_0'.
Generating RTLIL representation for module `\logic_1'.
Generating RTLIL representation for module `\gclkbuff'.
Successfully finished Verilog frontend.

9.2. Executing Verilog-2005 frontend: /nfs_cadtools/raptor/08_23_2022_08_00_01/bin/../share/yosys/rapidsilicon/genesis/cells_sim.v
Parsing Verilog input from `/nfs_cadtools/raptor/08_23_2022_08_00_01/bin/../share/yosys/rapidsilicon/genesis/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\dffsre'.
Generating RTLIL representation for module `\dffnsre'.
Generating RTLIL representation for module `\latchsre'.
Generating RTLIL representation for module `\latchnsre'.
Generating RTLIL representation for module `\io_scff'.
Generating RTLIL representation for module `\scff'.
Generating RTLIL representation for module `\sh_dff'.
Generating RTLIL representation for module `\adder_carry'.
Generating RTLIL representation for module `\sdffr'.
Generating RTLIL representation for module `\sdffs'.
Generating RTLIL representation for module `\TDP_BRAM18'.
Generating RTLIL representation for module `\TDP36K'.
Successfully finished Verilog frontend.

9.3. Executing Verilog-2005 frontend: /nfs_cadtools/raptor/08_23_2022_08_00_01/bin/../share/yosys/rapidsilicon/genesis/dsp_sim.v
Parsing Verilog input from `/nfs_cadtools/raptor/08_23_2022_08_00_01/bin/../share/yosys/rapidsilicon/genesis/dsp_sim.v' to AST representation.
Generating RTLIL representation for module `\RS_DSP1'.
Generating RTLIL representation for module `\RS_DSP2'.
Generating RTLIL representation for module `\RS_DSP2_MULT'.
Generating RTLIL representation for module `\RS_DSP2_MULT_REGIN'.
Generating RTLIL representation for module `\RS_DSP2_MULT_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULT_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD_REGIN'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC_REGIN'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC_REGIN_REGOUT'.
Generating RTLIL representation for module `\dsp_t1_20x18x64_cfg_ports'.
Generating RTLIL representation for module `\dsp_t1_10x9x32_cfg_ports'.
Generating RTLIL representation for module `\dsp_t1_sim_cfg_ports'.
Generating RTLIL representation for module `\RS_DSP3'.
Generating RTLIL representation for module `\RS_DSP3_MULT'.
Generating RTLIL representation for module `\RS_DSP3_MULT_REGIN'.
Generating RTLIL representation for module `\RS_DSP3_MULT_REGOUT'.
Generating RTLIL representation for module `\RS_DSP3_MULT_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP3_MULTADD'.
Generating RTLIL representation for module `\RS_DSP3_MULTADD_REGIN'.
Generating RTLIL representation for module `\RS_DSP3_MULTADD_REGOUT'.
Generating RTLIL representation for module `\RS_DSP3_MULTADD_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP3_MULTACC'.
Generating RTLIL representation for module `\RS_DSP3_MULTACC_REGIN'.
Generating RTLIL representation for module `\RS_DSP3_MULTACC_REGOUT'.
Generating RTLIL representation for module `\RS_DSP3_MULTACC_REGIN_REGOUT'.
Generating RTLIL representation for module `\dsp_t1_20x18x64_cfg_params'.
Generating RTLIL representation for module `\dsp_t1_10x9x32_cfg_params'.
Generating RTLIL representation for module `\dsp_t1_sim_cfg_params'.
Successfully finished Verilog frontend.

9.4. Executing HIERARCHY pass (managing design hierarchy).

9.4.1. Analyzing design hierarchy..
Top module:  \Simon_bit_serial_top_module_FPGA
Used module:     \simon_key_expansion_shiftreg
Used module:     \simon_datapath_shiftreg

9.4.2. Analyzing design hierarchy..
Top module:  \Simon_bit_serial_top_module_FPGA
Used module:     \simon_key_expansion_shiftreg
Used module:     \simon_datapath_shiftreg
Removed 0 unused modules.

9.5. Executing PROC pass (convert processes to netlists).

9.5.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

9.5.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

9.5.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

9.5.4. Executing PROC_INIT pass (extract init attributes).

9.5.5. Executing PROC_ARST pass (detect async resets in processes).

9.5.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

9.5.7. Executing PROC_MUX pass (convert decision trees to multiplexers).

9.5.8. Executing PROC_DLATCH pass (convert process syncs to latches).

9.5.9. Executing PROC_DFF pass (convert process syncs to FFs).

9.5.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

9.5.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

9.5.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module simon_key_expansion_shiftreg.
<suppressed ~7 debug messages>
Optimizing module simon_datapath_shiftreg.
<suppressed ~9 debug messages>
Optimizing module Simon_bit_serial_top_module_FPGA.

9.6. Executing DEMUXMAP pass.

9.7. Executing FLATTEN pass (flatten design).
Deleting now unused module simon_datapath_shiftreg.
Deleting now unused module simon_key_expansion_shiftreg.
<suppressed ~2 debug messages>

9.8. Executing DEMUXMAP pass.

9.9. Executing TRIBUF pass.

9.10. Executing DEMINOUT pass (demote inout ports to input or output).

9.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module Simon_bit_serial_top_module_FPGA.

9.12. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Simon_bit_serial_top_module_FPGA..
Removed 5 unused cells and 83 unused wires.
<suppressed ~61 debug messages>

9.13. Executing CHECK pass (checking for obvious problems).
Checking module Simon_bit_serial_top_module_FPGA...
Found and reported 0 problems.

9.14. Executing OPT_EXPR pass (perform const folding).
Optimizing module Simon_bit_serial_top_module_FPGA.
<suppressed ~1 debug messages>

9.15. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Simon_bit_serial_top_module_FPGA'.
<suppressed ~6 debug messages>
Removed a total of 2 cells.

9.16. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \Simon_bit_serial_top_module_FPGA..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $flatten\datapath.$verific$mux_98$/nfs_scratch/scratch/AE/Roman/open_source_design/simon_core/./Simon_bit_serial_datapath_FPGA.v:181$178.
Removed 1 multiplexer ports.
<suppressed ~40 debug messages>

9.17. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \Simon_bit_serial_top_module_FPGA.
Performed a total of 0 changes.

9.18. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Simon_bit_serial_top_module_FPGA'.
<suppressed ~9 debug messages>
Removed a total of 3 cells.

9.19. Executing OPT_SHARE pass.

9.20. Executing OPT_DFF pass (perform DFF optimizations).
Removing never-active async load on $flatten\key_exp.$verific$shifter2_reg$/nfs_scratch/scratch/AE/Roman/open_source_design/simon_core/./Simon_bit_serial_key_expansion_FPGA.v:83$283 ($aldff) from module Simon_bit_serial_top_module_FPGA.
Removing never-active async load on $flatten\key_exp.$verific$shifter1_reg$/nfs_scratch/scratch/AE/Roman/open_source_design/simon_core/./Simon_bit_serial_key_expansion_FPGA.v:70$279 ($aldff) from module Simon_bit_serial_top_module_FPGA.
Removing never-active async load on $flatten\key_exp.$verific$round_counter_reg$/nfs_scratch/scratch/AE/Roman/open_source_design/simon_core/./Simon_bit_serial_key_expansion_FPGA.v:215$355 ($aldff) from module Simon_bit_serial_top_module_FPGA.
Removing never-active async load on $flatten\datapath.$verific$shifter2_reg$/nfs_scratch/scratch/AE/Roman/open_source_design/simon_core/./Simon_bit_serial_datapath_FPGA.v:68$105 ($aldff) from module Simon_bit_serial_top_module_FPGA.
Removing never-active async load on $flatten\datapath.$verific$shifter1_reg$/nfs_scratch/scratch/AE/Roman/open_source_design/simon_core/./Simon_bit_serial_datapath_FPGA.v:55$101 ($aldff) from module Simon_bit_serial_top_module_FPGA.
Removing never-active async load on $flatten\datapath.$verific$bit_counter_reg$/nfs_scratch/scratch/AE/Roman/open_source_design/simon_core/./Simon_bit_serial_datapath_FPGA.v:218$194 ($aldff) from module Simon_bit_serial_top_module_FPGA.

9.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Simon_bit_serial_top_module_FPGA..
Removed 1 unused cells and 4 unused wires.
<suppressed ~3 debug messages>

9.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module Simon_bit_serial_top_module_FPGA.

9.23. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \Simon_bit_serial_top_module_FPGA..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~37 debug messages>

9.24. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \Simon_bit_serial_top_module_FPGA.
Performed a total of 0 changes.

9.25. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Simon_bit_serial_top_module_FPGA'.
Removed a total of 0 cells.

9.26. Executing OPT_SHARE pass.

9.27. Executing OPT_DFF pass (perform DFF optimizations).

9.28. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Simon_bit_serial_top_module_FPGA..

9.29. Executing OPT_EXPR pass (perform const folding).
Optimizing module Simon_bit_serial_top_module_FPGA.
MAX OPT ITERATION = 2

9.30. Executing FSM pass (extract and optimize FSM).

9.30.1. Executing FSM_DETECT pass (finding FSMs in design).

9.30.2. Executing FSM_EXTRACT pass (extracting FSM from design).

9.30.3. Executing FSM_OPT pass (simple optimizations of FSMs).

9.30.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Simon_bit_serial_top_module_FPGA..

9.30.5. Executing FSM_OPT pass (simple optimizations of FSMs).

9.30.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

9.30.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

9.30.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

9.31. Executing OPT_EXPR pass (perform const folding).
Optimizing module Simon_bit_serial_top_module_FPGA.

9.32. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Simon_bit_serial_top_module_FPGA'.
Removed a total of 0 cells.

9.33. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \Simon_bit_serial_top_module_FPGA..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~37 debug messages>

9.34. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \Simon_bit_serial_top_module_FPGA.
Performed a total of 0 changes.

9.35. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Simon_bit_serial_top_module_FPGA'.
Removed a total of 0 cells.

9.36. Executing OPT_SHARE pass.

9.37. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $flatten\key_exp.$verific$shifter2_reg$/nfs_scratch/scratch/AE/Roman/open_source_design/simon_core/./Simon_bit_serial_key_expansion_FPGA.v:83$283 ($dff) from module Simon_bit_serial_top_module_FPGA (D = { \key_exp.shift_in2 \key_exp.shifter2 [63:1] }, Q = \key_exp.shifter2).
Adding EN signal on $flatten\key_exp.$verific$shifter1_reg$/nfs_scratch/scratch/AE/Roman/open_source_design/simon_core/./Simon_bit_serial_key_expansion_FPGA.v:70$279 ($dff) from module Simon_bit_serial_top_module_FPGA (D = { \key_exp.shift_in1 \key_exp.shifter1 [59:1] }, Q = \key_exp.shifter1).
Adding EN signal on $flatten\key_exp.$verific$round_counter_reg$/nfs_scratch/scratch/AE/Roman/open_source_design/simon_core/./Simon_bit_serial_key_expansion_FPGA.v:215$355 ($dff) from module Simon_bit_serial_top_module_FPGA (D = $flatten\key_exp.$verific$n599$271, Q = \key_exp.round_counter).
Adding EN signal on $flatten\key_exp.$verific$lut_ff3_reg$/nfs_scratch/scratch/AE/Roman/open_source_design/simon_core/./Simon_bit_serial_key_expansion_FPGA.v:110$305 ($dff) from module Simon_bit_serial_top_module_FPGA (D = \key_exp.lut_out, Q = \key_exp.lut_ff3).
Adding EN signal on $flatten\key_exp.$verific$lut_ff2_reg$/nfs_scratch/scratch/AE/Roman/open_source_design/simon_core/./Simon_bit_serial_key_expansion_FPGA.v:110$306 ($dff) from module Simon_bit_serial_top_module_FPGA (D = \key_exp.lut_ff3, Q = \key_exp.lut_ff2).
Adding EN signal on $flatten\key_exp.$verific$lut_ff1_reg$/nfs_scratch/scratch/AE/Roman/open_source_design/simon_core/./Simon_bit_serial_key_expansion_FPGA.v:110$307 ($dff) from module Simon_bit_serial_top_module_FPGA (D = \key_exp.lut_ff2, Q = \key_exp.lut_ff1).
Adding EN signal on $flatten\key_exp.$verific$lut_ff0_reg$/nfs_scratch/scratch/AE/Roman/open_source_design/simon_core/./Simon_bit_serial_key_expansion_FPGA.v:110$308 ($dff) from module Simon_bit_serial_top_module_FPGA (D = \key_exp.lut_ff1, Q = \key_exp.lut_ff0).
Adding EN signal on $flatten\key_exp.$verific$fifo_ff3_reg$/nfs_scratch/scratch/AE/Roman/open_source_design/simon_core/./Simon_bit_serial_key_expansion_FPGA.v:98$293 ($dff) from module Simon_bit_serial_top_module_FPGA (D = \key_exp.shifter1 [0], Q = \key_exp.fifo_ff3).
Adding EN signal on $flatten\key_exp.$verific$fifo_ff2_reg$/nfs_scratch/scratch/AE/Roman/open_source_design/simon_core/./Simon_bit_serial_key_expansion_FPGA.v:98$294 ($dff) from module Simon_bit_serial_top_module_FPGA (D = \key_exp.fifo_ff3, Q = \key_exp.fifo_ff2).
Adding EN signal on $flatten\key_exp.$verific$fifo_ff1_reg$/nfs_scratch/scratch/AE/Roman/open_source_design/simon_core/./Simon_bit_serial_key_expansion_FPGA.v:98$295 ($dff) from module Simon_bit_serial_top_module_FPGA (D = \key_exp.fifo_ff2, Q = \key_exp.fifo_ff1).
Adding EN signal on $flatten\key_exp.$verific$fifo_ff0_reg$/nfs_scratch/scratch/AE/Roman/open_source_design/simon_core/./Simon_bit_serial_key_expansion_FPGA.v:98$296 ($dff) from module Simon_bit_serial_top_module_FPGA (D = \key_exp.fifo_ff1, Q = \key_exp.fifo_ff0).
Adding EN signal on $flatten\datapath.$verific$shifter2_reg$/nfs_scratch/scratch/AE/Roman/open_source_design/simon_core/./Simon_bit_serial_datapath_FPGA.v:68$105 ($dff) from module Simon_bit_serial_top_module_FPGA (D = { \datapath.shifter1 [0] \datapath.shifter2 [63:1] }, Q = \datapath.shifter2).
Adding EN signal on $flatten\datapath.$verific$shifter1_reg$/nfs_scratch/scratch/AE/Roman/open_source_design/simon_core/./Simon_bit_serial_datapath_FPGA.v:55$101 ($dff) from module Simon_bit_serial_top_module_FPGA (D = { \datapath.shift_in1 \datapath.shifter1 [55:1] }, Q = \datapath.shifter1).
Adding EN signal on $flatten\datapath.$verific$fifo_ff63_reg$/nfs_scratch/scratch/AE/Roman/open_source_design/simon_core/./Simon_bit_serial_datapath_FPGA.v:89$123 ($dff) from module Simon_bit_serial_top_module_FPGA (D = \datapath.fifo_ff_input, Q = \datapath.fifo_ff63).
Adding EN signal on $flatten\datapath.$verific$fifo_ff62_reg$/nfs_scratch/scratch/AE/Roman/open_source_design/simon_core/./Simon_bit_serial_datapath_FPGA.v:89$124 ($dff) from module Simon_bit_serial_top_module_FPGA (D = \datapath.fifo_ff63, Q = \datapath.fifo_ff62).
Adding EN signal on $flatten\datapath.$verific$fifo_ff61_reg$/nfs_scratch/scratch/AE/Roman/open_source_design/simon_core/./Simon_bit_serial_datapath_FPGA.v:89$125 ($dff) from module Simon_bit_serial_top_module_FPGA (D = \datapath.fifo_ff62, Q = \datapath.fifo_ff61).
Adding EN signal on $flatten\datapath.$verific$fifo_ff60_reg$/nfs_scratch/scratch/AE/Roman/open_source_design/simon_core/./Simon_bit_serial_datapath_FPGA.v:89$126 ($dff) from module Simon_bit_serial_top_module_FPGA (D = \datapath.fifo_ff61, Q = \datapath.fifo_ff60).
Adding EN signal on $flatten\datapath.$verific$fifo_ff59_reg$/nfs_scratch/scratch/AE/Roman/open_source_design/simon_core/./Simon_bit_serial_datapath_FPGA.v:89$127 ($dff) from module Simon_bit_serial_top_module_FPGA (D = \datapath.fifo_ff60, Q = \datapath.fifo_ff59).
Adding EN signal on $flatten\datapath.$verific$fifo_ff58_reg$/nfs_scratch/scratch/AE/Roman/open_source_design/simon_core/./Simon_bit_serial_datapath_FPGA.v:89$128 ($dff) from module Simon_bit_serial_top_module_FPGA (D = \datapath.fifo_ff59, Q = \datapath.fifo_ff58).
Adding EN signal on $flatten\datapath.$verific$fifo_ff57_reg$/nfs_scratch/scratch/AE/Roman/open_source_design/simon_core/./Simon_bit_serial_datapath_FPGA.v:89$129 ($dff) from module Simon_bit_serial_top_module_FPGA (D = \datapath.fifo_ff58, Q = \datapath.fifo_ff57).
Adding EN signal on $flatten\datapath.$verific$fifo_ff56_reg$/nfs_scratch/scratch/AE/Roman/open_source_design/simon_core/./Simon_bit_serial_datapath_FPGA.v:89$130 ($dff) from module Simon_bit_serial_top_module_FPGA (D = \datapath.fifo_ff57, Q = \datapath.fifo_ff56).
Adding EN signal on $flatten\datapath.$verific$bit_counter_reg$/nfs_scratch/scratch/AE/Roman/open_source_design/simon_core/./Simon_bit_serial_datapath_FPGA.v:218$194 ($dff) from module Simon_bit_serial_top_module_FPGA (D = $flatten\datapath.$verific$n518$95, Q = \datapath.bit_counter).

9.38. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Simon_bit_serial_top_module_FPGA..
Removed 20 unused cells and 20 unused wires.
<suppressed ~21 debug messages>

9.39. Executing OPT_EXPR pass (perform const folding).
Optimizing module Simon_bit_serial_top_module_FPGA.
<suppressed ~2 debug messages>

9.40. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \Simon_bit_serial_top_module_FPGA..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~21 debug messages>

9.41. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \Simon_bit_serial_top_module_FPGA.
Performed a total of 0 changes.

9.42. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Simon_bit_serial_top_module_FPGA'.
Removed a total of 0 cells.

9.43. Executing OPT_SHARE pass.

9.44. Executing OPT_DFF pass (perform DFF optimizations).

9.45. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Simon_bit_serial_top_module_FPGA..

9.46. Executing OPT_EXPR pass (perform const folding).
Optimizing module Simon_bit_serial_top_module_FPGA.
MAX OPT ITERATION = 2

9.47. Executing WREDUCE pass (reducing word size of cells).
Removed top 6 bits (of 7) from port B of cell Simon_bit_serial_top_module_FPGA.$flatten\key_exp.$verific$LessThan_44$/nfs_scratch/scratch/AE/Roman/open_source_design/simon_core/./Simon_bit_serial_key_expansion_FPGA.v:117$312 ($lt).
Removed top 4 bits (of 6) from port A of cell Simon_bit_serial_top_module_FPGA.$flatten\key_exp.$verific$LessThan_45$/nfs_scratch/scratch/AE/Roman/open_source_design/simon_core/./Simon_bit_serial_key_expansion_FPGA.v:117$313 ($lt).
Removed top 3 bits (of 6) from port B of cell Simon_bit_serial_top_module_FPGA.$flatten\key_exp.$verific$LessThan_50$/nfs_scratch/scratch/AE/Roman/open_source_design/simon_core/./Simon_bit_serial_key_expansion_FPGA.v:119$316 ($lt).
Removed top 6 bits (of 7) from port A of cell Simon_bit_serial_top_module_FPGA.$flatten\key_exp.$verific$LessThan_52$/nfs_scratch/scratch/AE/Roman/open_source_design/simon_core/./Simon_bit_serial_key_expansion_FPGA.v:119$318 ($lt).
Removed top 6 bits (of 7) from port B of cell Simon_bit_serial_top_module_FPGA.$flatten\key_exp.$verific$add_112$/nfs_scratch/scratch/AE/Roman/open_source_design/simon_core/./Simon_bit_serial_key_expansion_FPGA.v:210$350 ($add).
Removed top 5 bits (of 6) from port B of cell Simon_bit_serial_top_module_FPGA.$flatten\key_exp.$verific$equal_125$/nfs_scratch/scratch/AE/Roman/open_source_design/simon_core/./Simon_bit_serial_key_expansion_FPGA.v:229$359 ($eq).
Removed top 1 bits (of 2) from port B of cell Simon_bit_serial_top_module_FPGA.$flatten\key_exp.$verific$equal_64$/nfs_scratch/scratch/AE/Roman/open_source_design/simon_core/./Simon_bit_serial_key_expansion_FPGA.v:139$327 ($eq).
Removed top 2 bits (of 6) from port B of cell Simon_bit_serial_top_module_FPGA.$flatten\datapath.$verific$LessThan_86$/nfs_scratch/scratch/AE/Roman/open_source_design/simon_core/./Simon_bit_serial_datapath_FPGA.v:169$170 ($lt).
Removed top 3 bits (of 6) from port A of cell Simon_bit_serial_top_module_FPGA.$flatten\datapath.$verific$LessThan_89$/nfs_scratch/scratch/AE/Roman/open_source_design/simon_core/./Simon_bit_serial_datapath_FPGA.v:169$172 ($lt).
Removed top 5 bits (of 6) from port B of cell Simon_bit_serial_top_module_FPGA.$flatten\datapath.$verific$add_116$/nfs_scratch/scratch/AE/Roman/open_source_design/simon_core/./Simon_bit_serial_datapath_FPGA.v:215$191 ($add).
Removed top 1 bits (of 2) from port B of cell Simon_bit_serial_top_module_FPGA.$flatten\datapath.$verific$equal_62$/nfs_scratch/scratch/AE/Roman/open_source_design/simon_core/./Simon_bit_serial_datapath_FPGA.v:128$154 ($eq).
Removed top 1 bits (of 2) from port B of cell Simon_bit_serial_top_module_FPGA.$flatten\datapath.$verific$equal_92$/nfs_scratch/scratch/AE/Roman/open_source_design/simon_core/./Simon_bit_serial_datapath_FPGA.v:169$175 ($eq).

9.48. Executing PEEPOPT pass (run peephole optimizers).

9.49. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Simon_bit_serial_top_module_FPGA..

9.50. Executing DEMUXMAP pass.

9.51. Printing statistics.

=== Simon_bit_serial_top_module_FPGA ===

   Number of wires:                143
   Number of wire bits:            511
   Number of public wires:          82
   Number of public wire bits:     415
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                112
     $add                            2
     $and                            9
     $bmux                           1
     $dff                            8
     $dffe                          22
     $eq                            10
     $logic_not                      5
     $lt                             6
     $mux                           32
     $not                            1
     $or                             6
     $reduce_bool                    3
     $xor                            7

9.52. Executing WREDUCE pass (reducing word size of cells).

9.53. Executing RS_DSP_MACC pass.

9.54. Executing TECHMAP pass (map to technology primitives).

9.54.1. Executing Verilog-2005 frontend: /nfs_cadtools/raptor/08_23_2022_08_00_01/bin/../share/yosys/mul2dsp.v
Parsing Verilog input from `/nfs_cadtools/raptor/08_23_2022_08_00_01/bin/../share/yosys/mul2dsp.v' to AST representation.
Generating RTLIL representation for module `\_80_mul'.
Generating RTLIL representation for module `\_90_soft_mul'.
Successfully finished Verilog frontend.

9.54.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

9.55. Executing TECHMAP pass (map to technology primitives).

9.55.1. Executing Verilog-2005 frontend: /nfs_cadtools/raptor/08_23_2022_08_00_01/bin/../share/yosys/mul2dsp.v
Parsing Verilog input from `/nfs_cadtools/raptor/08_23_2022_08_00_01/bin/../share/yosys/mul2dsp.v' to AST representation.
Generating RTLIL representation for module `\_80_mul'.
Generating RTLIL representation for module `\_90_soft_mul'.
Successfully finished Verilog frontend.

9.55.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

9.56. Executing TECHMAP pass (map to technology primitives).

9.56.1. Executing Verilog-2005 frontend: /nfs_cadtools/raptor/08_23_2022_08_00_01/bin/../share/yosys/rapidsilicon/genesis/dsp_map.v
Parsing Verilog input from `/nfs_cadtools/raptor/08_23_2022_08_00_01/bin/../share/yosys/rapidsilicon/genesis/dsp_map.v' to AST representation.
Generating RTLIL representation for module `\$__RS_MUL20X18'.
Generating RTLIL representation for module `\$__RS_MUL10X9'.
Successfully finished Verilog frontend.

9.56.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

9.57. Executing RS_DSP_SIMD pass.

9.58. Executing TECHMAP pass (map to technology primitives).

9.58.1. Executing Verilog-2005 frontend: /nfs_cadtools/raptor/08_23_2022_08_00_01/bin/../share/yosys/rapidsilicon/genesis/dsp_final_map.v
Parsing Verilog input from `/nfs_cadtools/raptor/08_23_2022_08_00_01/bin/../share/yosys/rapidsilicon/genesis/dsp_final_map.v' to AST representation.
Generating RTLIL representation for module `\dsp_t1_20x18x64_cfg_ports'.
Generating RTLIL representation for module `\dsp_t1_10x9x32_cfg_ports'.
Generating RTLIL representation for module `\dsp_t1_20x18x64_cfg_params'.
Generating RTLIL representation for module `\dsp_t1_10x9x32_cfg_params'.
Successfully finished Verilog frontend.

9.58.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~6 debug messages>

9.59. Executing RS_DSP_IO_REGS pass.

9.60. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module Simon_bit_serial_top_module_FPGA:
  creating $macc model for $flatten\datapath.$verific$add_116$/nfs_scratch/scratch/AE/Roman/open_source_design/simon_core/./Simon_bit_serial_datapath_FPGA.v:215$191 ($add).
  creating $macc model for $flatten\key_exp.$verific$add_112$/nfs_scratch/scratch/AE/Roman/open_source_design/simon_core/./Simon_bit_serial_key_expansion_FPGA.v:210$350 ($add).
  creating $alu model for $macc $flatten\key_exp.$verific$add_112$/nfs_scratch/scratch/AE/Roman/open_source_design/simon_core/./Simon_bit_serial_key_expansion_FPGA.v:210$350.
  creating $alu model for $macc $flatten\datapath.$verific$add_116$/nfs_scratch/scratch/AE/Roman/open_source_design/simon_core/./Simon_bit_serial_datapath_FPGA.v:215$191.
  creating $alu model for $flatten\datapath.$verific$LessThan_86$/nfs_scratch/scratch/AE/Roman/open_source_design/simon_core/./Simon_bit_serial_datapath_FPGA.v:169$170 ($lt): new $alu
  creating $alu model for $flatten\datapath.$verific$LessThan_89$/nfs_scratch/scratch/AE/Roman/open_source_design/simon_core/./Simon_bit_serial_datapath_FPGA.v:169$172 ($lt): new $alu
  creating $alu model for $flatten\key_exp.$verific$LessThan_44$/nfs_scratch/scratch/AE/Roman/open_source_design/simon_core/./Simon_bit_serial_key_expansion_FPGA.v:117$312 ($lt): new $alu
  creating $alu model for $flatten\key_exp.$verific$LessThan_45$/nfs_scratch/scratch/AE/Roman/open_source_design/simon_core/./Simon_bit_serial_key_expansion_FPGA.v:117$313 ($lt): new $alu
  creating $alu model for $flatten\key_exp.$verific$LessThan_50$/nfs_scratch/scratch/AE/Roman/open_source_design/simon_core/./Simon_bit_serial_key_expansion_FPGA.v:119$316 ($lt): new $alu
  creating $alu model for $flatten\key_exp.$verific$LessThan_52$/nfs_scratch/scratch/AE/Roman/open_source_design/simon_core/./Simon_bit_serial_key_expansion_FPGA.v:119$318 ($lt): new $alu
  creating $alu cell for $flatten\key_exp.$verific$LessThan_52$/nfs_scratch/scratch/AE/Roman/open_source_design/simon_core/./Simon_bit_serial_key_expansion_FPGA.v:119$318: $auto$alumacc.cc:485:replace_alu$401
  creating $alu cell for $flatten\key_exp.$verific$LessThan_50$/nfs_scratch/scratch/AE/Roman/open_source_design/simon_core/./Simon_bit_serial_key_expansion_FPGA.v:119$316: $auto$alumacc.cc:485:replace_alu$406
  creating $alu cell for $flatten\key_exp.$verific$LessThan_45$/nfs_scratch/scratch/AE/Roman/open_source_design/simon_core/./Simon_bit_serial_key_expansion_FPGA.v:117$313: $auto$alumacc.cc:485:replace_alu$417
  creating $alu cell for $flatten\datapath.$verific$LessThan_89$/nfs_scratch/scratch/AE/Roman/open_source_design/simon_core/./Simon_bit_serial_datapath_FPGA.v:169$172: $auto$alumacc.cc:485:replace_alu$422
  creating $alu cell for $flatten\datapath.$verific$LessThan_86$/nfs_scratch/scratch/AE/Roman/open_source_design/simon_core/./Simon_bit_serial_datapath_FPGA.v:169$170: $auto$alumacc.cc:485:replace_alu$427
  creating $alu cell for $flatten\datapath.$verific$add_116$/nfs_scratch/scratch/AE/Roman/open_source_design/simon_core/./Simon_bit_serial_datapath_FPGA.v:215$191: $auto$alumacc.cc:485:replace_alu$438
  creating $alu cell for $flatten\key_exp.$verific$LessThan_44$/nfs_scratch/scratch/AE/Roman/open_source_design/simon_core/./Simon_bit_serial_key_expansion_FPGA.v:117$312: $auto$alumacc.cc:485:replace_alu$441
  creating $alu cell for $flatten\key_exp.$verific$add_112$/nfs_scratch/scratch/AE/Roman/open_source_design/simon_core/./Simon_bit_serial_key_expansion_FPGA.v:210$350: $auto$alumacc.cc:485:replace_alu$452
  created 8 $alu and 0 $macc cells.

9.61. Executing OPT_EXPR pass (perform const folding).
Optimizing module Simon_bit_serial_top_module_FPGA.

9.62. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Simon_bit_serial_top_module_FPGA'.
Removed a total of 0 cells.

9.63. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \Simon_bit_serial_top_module_FPGA..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~21 debug messages>

9.64. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \Simon_bit_serial_top_module_FPGA.
Performed a total of 0 changes.

9.65. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Simon_bit_serial_top_module_FPGA'.
Removed a total of 0 cells.

9.66. Executing OPT_SHARE pass.

9.67. Executing OPT_DFF pass (perform DFF optimizations).

9.68. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Simon_bit_serial_top_module_FPGA..
Removed 0 unused cells and 6 unused wires.
<suppressed ~1 debug messages>

9.69. Executing OPT_EXPR pass (perform const folding).
Optimizing module Simon_bit_serial_top_module_FPGA.
MAX OPT ITERATION = 1

9.70. Printing statistics.

=== Simon_bit_serial_top_module_FPGA ===

   Number of wires:                174
   Number of wire bits:            660
   Number of public wires:          82
   Number of public wire bits:     415
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                127
     $alu                            8
     $and                            9
     $bmux                           1
     $dff                            8
     $dffe                          22
     $eq                            10
     $logic_not                      5
     $mux                           32
     $not                           10
     $or                             9
     $reduce_and                     3
     $reduce_bool                    3
     $xor                            7

9.71. Executing MEMORY pass.

9.71.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

9.71.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

9.71.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

9.71.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

9.71.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).
Checking read port `$auto$memory_bmux2rom.cc:63:execute$455'[0] in module `\Simon_bit_serial_top_module_FPGA': no output FF found.
Checking read port address `$auto$memory_bmux2rom.cc:63:execute$455'[0] in module `\Simon_bit_serial_top_module_FPGA': merged address FF to cell.

9.71.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Simon_bit_serial_top_module_FPGA..

9.71.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

9.71.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

9.71.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Simon_bit_serial_top_module_FPGA..

9.71.10. Executing MEMORY_COLLECT pass (generating $mem cells).

9.72. Printing statistics.

=== Simon_bit_serial_top_module_FPGA ===

   Number of wires:                175
   Number of wire bits:            667
   Number of public wires:          82
   Number of public wire bits:     415
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                128
     $alu                            8
     $and                            9
     $dff                            8
     $dffe                          22
     $eq                            10
     $logic_not                      5
     $mem_v2                         1
     $mux                           33
     $not                           10
     $or                             9
     $reduce_and                     3
     $reduce_bool                    3
     $xor                            7

9.73. Executing MUXPACK pass ($mux cell cascades to $pmux).
Converting Simon_bit_serial_top_module_FPGA.$flatten\datapath.$verific$i67$/nfs_scratch/scratch/AE/Roman/open_source_design/simon_core/./Simon_bit_serial_datapath_FPGA.v:133$158 ... Simon_bit_serial_top_module_FPGA.$flatten\datapath.$verific$i69$/nfs_scratch/scratch/AE/Roman/open_source_design/simon_core/./Simon_bit_serial_datapath_FPGA.v:133$160 to a pmux with 3 cases.
Converting Simon_bit_serial_top_module_FPGA.$flatten\datapath.$verific$mux_119$/nfs_scratch/scratch/AE/Roman/open_source_design/simon_core/./Simon_bit_serial_datapath_FPGA.v:217$192 ... Simon_bit_serial_top_module_FPGA.$flatten\datapath.$verific$mux_120$/nfs_scratch/scratch/AE/Roman/open_source_design/simon_core/./Simon_bit_serial_datapath_FPGA.v:217$193 to a pmux with 2 cases.
Converted 5 (p)mux cells into 2 pmux cells.
<suppressed ~24 debug messages>

9.74. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Simon_bit_serial_top_module_FPGA..
Removed 0 unused cells and 3 unused wires.
<suppressed ~1 debug messages>

9.75. Executing MEMORY_BRAM pass (mapping $mem cells to block memories).
Processing Simon_bit_serial_top_module_FPGA.$auto$memory_bmux2rom.cc:63:execute$455:
  Properties: ports=1 bits=128 rports=1 wports=0 dbits=1 abits=7 words=128
  Checking rule #1 for bram type $__RS_FACTOR_BRAM36_TDP (variant 1):
    Bram geometry: abits=10 dbits=36 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__RS_FACTOR_BRAM36_TDP: awaste=896 dwaste=35 bwaste=36736 waste=36736 efficiency=0
    Rule #1 for bram type $__RS_FACTOR_BRAM36_TDP (variant 1) rejected: requirement 'min efficiency 1' not met.
  Checking rule #1 for bram type $__RS_FACTOR_BRAM36_TDP (variant 2):
    Bram geometry: abits=11 dbits=18 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__RS_FACTOR_BRAM36_TDP: awaste=1920 dwaste=17 bwaste=36736 waste=36736 efficiency=0
    Rule #1 for bram type $__RS_FACTOR_BRAM36_TDP (variant 2) rejected: requirement 'min efficiency 1' not met.
  Checking rule #1 for bram type $__RS_FACTOR_BRAM36_TDP (variant 3):
    Bram geometry: abits=12 dbits=9 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__RS_FACTOR_BRAM36_TDP: awaste=3968 dwaste=8 bwaste=36736 waste=36736 efficiency=0
    Rule #1 for bram type $__RS_FACTOR_BRAM36_TDP (variant 3) rejected: requirement 'min efficiency 1' not met.
  Checking rule #1 for bram type $__RS_FACTOR_BRAM36_TDP (variant 4):
    Bram geometry: abits=13 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__RS_FACTOR_BRAM36_TDP: awaste=8064 dwaste=3 bwaste=32640 waste=32640 efficiency=0
    Rule #1 for bram type $__RS_FACTOR_BRAM36_TDP (variant 4) rejected: requirement 'min efficiency 1' not met.
  Checking rule #1 for bram type $__RS_FACTOR_BRAM36_TDP (variant 5):
    Bram geometry: abits=14 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__RS_FACTOR_BRAM36_TDP: awaste=16256 dwaste=1 bwaste=32640 waste=32640 efficiency=0
    Rule #1 for bram type $__RS_FACTOR_BRAM36_TDP (variant 5) rejected: requirement 'min efficiency 1' not met.
  Checking rule #1 for bram type $__RS_FACTOR_BRAM36_TDP (variant 6):
    Bram geometry: abits=15 dbits=1 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__RS_FACTOR_BRAM36_TDP: awaste=32640 dwaste=0 bwaste=32640 waste=32640 efficiency=0
    Rule #1 for bram type $__RS_FACTOR_BRAM36_TDP (variant 6) rejected: requirement 'min efficiency 1' not met.
  Checking rule #2 for bram type $__RS_FACTOR_BRAM36_SDP (variant 1):
    Bram geometry: abits=10 dbits=36 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__RS_FACTOR_BRAM36_SDP: awaste=896 dwaste=35 bwaste=36736 waste=36736 efficiency=0
    Rule #2 for bram type $__RS_FACTOR_BRAM36_SDP (variant 1) rejected: requirement 'min efficiency 1' not met.
  Checking rule #2 for bram type $__RS_FACTOR_BRAM36_SDP (variant 2):
    Bram geometry: abits=11 dbits=18 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__RS_FACTOR_BRAM36_SDP: awaste=1920 dwaste=17 bwaste=36736 waste=36736 efficiency=0
    Rule #2 for bram type $__RS_FACTOR_BRAM36_SDP (variant 2) rejected: requirement 'min efficiency 1' not met.
  Checking rule #2 for bram type $__RS_FACTOR_BRAM36_SDP (variant 3):
    Bram geometry: abits=12 dbits=9 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__RS_FACTOR_BRAM36_SDP: awaste=3968 dwaste=8 bwaste=36736 waste=36736 efficiency=0
    Rule #2 for bram type $__RS_FACTOR_BRAM36_SDP (variant 3) rejected: requirement 'min efficiency 1' not met.
  Checking rule #2 for bram type $__RS_FACTOR_BRAM36_SDP (variant 4):
    Bram geometry: abits=13 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__RS_FACTOR_BRAM36_SDP: awaste=8064 dwaste=3 bwaste=32640 waste=32640 efficiency=0
    Rule #2 for bram type $__RS_FACTOR_BRAM36_SDP (variant 4) rejected: requirement 'min efficiency 1' not met.
  Checking rule #2 for bram type $__RS_FACTOR_BRAM36_SDP (variant 5):
    Bram geometry: abits=14 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__RS_FACTOR_BRAM36_SDP: awaste=16256 dwaste=1 bwaste=32640 waste=32640 efficiency=0
    Rule #2 for bram type $__RS_FACTOR_BRAM36_SDP (variant 5) rejected: requirement 'min efficiency 1' not met.
  Checking rule #2 for bram type $__RS_FACTOR_BRAM36_SDP (variant 6):
    Bram geometry: abits=15 dbits=1 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__RS_FACTOR_BRAM36_SDP: awaste=32640 dwaste=0 bwaste=32640 waste=32640 efficiency=0
    Rule #2 for bram type $__RS_FACTOR_BRAM36_SDP (variant 6) rejected: requirement 'min efficiency 1' not met.
  No acceptable bram resources found.

9.76. Executing TECHMAP pass (map to technology primitives).

9.76.1. Executing Verilog-2005 frontend: /nfs_cadtools/raptor/08_23_2022_08_00_01/bin/../share/yosys/rapidsilicon/genesis/brams_map.v
Parsing Verilog input from `/nfs_cadtools/raptor/08_23_2022_08_00_01/bin/../share/yosys/rapidsilicon/genesis/brams_map.v' to AST representation.
Generating RTLIL representation for module `\$__RS_FACTOR_BRAM36_TDP'.
Generating RTLIL representation for module `\$__RS_FACTOR_BRAM18_TDP'.
/nfs_cadtools/raptor/08_23_2022_08_00_01/bin/../share/yosys/rapidsilicon/genesis/brams_map.v:236: Warning: Range [2:0] select out of bounds on signal `\DOP': Setting 1 MSB bits to undef.
Generating RTLIL representation for module `\$__RS_FACTOR_BRAM36_SDP'.
Successfully finished Verilog frontend.

9.76.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~5 debug messages>

9.77. Executing PMUXTREE pass.

9.78. Executing MUXPACK pass ($mux cell cascades to $pmux).
Converting Simon_bit_serial_top_module_FPGA.$auto$pmuxtree.cc:65:recursive_mux_generator$474 ... Simon_bit_serial_top_module_FPGA.$auto$pmuxtree.cc:65:recursive_mux_generator$476 to a pmux with 2 cases.
Converted 2 (p)mux cells into 1 pmux cells.
<suppressed ~22 debug messages>

9.79. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).
Mapping memory $auto$memory_bmux2rom.cc:63:execute$455 in module \Simon_bit_serial_top_module_FPGA:
  created 128 $dff cells and 0 static cells of width 1.
Extracted data FF from read port 0 of Simon_bit_serial_top_module_FPGA.$auto$memory_bmux2rom.cc:63:execute$455: $$auto$memory_bmux2rom.cc:63:execute$455$rdreg[0]
  read interface: 1 $dff and 127 $mux cells.
  write interface: 0 write mux blocks.

9.80. Printing statistics.

=== Simon_bit_serial_top_module_FPGA ===

   Number of wires:                686
   Number of wire bits:           1178
   Number of public wires:          82
   Number of public wire bits:     415
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                380
     $alu                            8
     $and                            9
     $dff                          137
     $dffe                          22
     $eq                            10
     $logic_not                      5
     $mux                          156
     $not                           10
     $or                             9
     $pmux                           1
     $reduce_and                     3
     $reduce_bool                    3
     $xor                            7

9.81. Executing TECHMAP pass (map to technology primitives).

9.81.1. Executing Verilog-2005 frontend: /nfs_cadtools/raptor/08_23_2022_08_00_01/bin/../share/yosys/techmap.v
Parsing Verilog input from `/nfs_cadtools/raptor/08_23_2022_08_00_01/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

9.81.2. Executing Verilog-2005 frontend: /nfs_cadtools/raptor/08_23_2022_08_00_01/bin/../share/yosys/rapidsilicon/genesis/arith_map.v
Parsing Verilog input from `/nfs_cadtools/raptor/08_23_2022_08_00_01/bin/../share/yosys/rapidsilicon/genesis/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_rs_alu'.
Successfully finished Verilog frontend.

9.81.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $mux.
Using template $paramod$c5c783b17ab1d780abfad8cfe6563a0a7b47a3b0\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $reduce_bool.
Using template $paramod$103b4016182df467cceab67bcf3e18e6361ec0fd\_90_alu for cells of type $alu.
Using template $paramod$4f7462fd7944a40ab328577064922bdf555975a5\_90_alu for cells of type $alu.
Using template $paramod$9970e6a829a899c1fae39c88305c3c80d98a6bfd\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $dffe.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $xor.
Using template $paramod$32efbfac1c4dc57230cf86180788fdfd12e3b511\_90_alu for cells of type $alu.
Using template $paramod$5bb6c3f3e4a5303115f41a182fad517280ea0b25\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $reduce_or.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000111 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000110 for cells of type $lcu.
No more expansions possible.
<suppressed ~1272 debug messages>

9.82. Printing statistics.

=== Simon_bit_serial_top_module_FPGA ===

   Number of wires:               1056
   Number of wire bits:          11059
   Number of public wires:          82
   Number of public wire bits:     415
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               1145
     $_AND_                        161
     $_DFFE_PP_                    273
     $_DFF_P_                      137
     $_MUX_                        235
     $_NOT_                         76
     $_OR_                         118
     $_XOR_                        145

9.83. Executing OPT_EXPR pass (perform const folding).
Optimizing module Simon_bit_serial_top_module_FPGA.
<suppressed ~339 debug messages>

9.84. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Simon_bit_serial_top_module_FPGA'.
<suppressed ~279 debug messages>
Removed a total of 93 cells.

9.85. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \Simon_bit_serial_top_module_FPGA..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

9.86. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \Simon_bit_serial_top_module_FPGA.
Performed a total of 0 changes.

9.87. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Simon_bit_serial_top_module_FPGA'.
Removed a total of 0 cells.

9.88. Executing OPT_SHARE pass.

9.89. Executing OPT_DFF pass (perform DFF optimizations).
Handling const CLK on $auto$ff.cc:262:slice$1208 ($_DFF_P_) from module Simon_bit_serial_top_module_FPGA (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1367 ($_DFF_P_) from module Simon_bit_serial_top_module_FPGA (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1356 ($_DFF_P_) from module Simon_bit_serial_top_module_FPGA (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1345 ($_DFF_P_) from module Simon_bit_serial_top_module_FPGA (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1820 ($_DFF_P_) from module Simon_bit_serial_top_module_FPGA (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1753 ($_DFF_P_) from module Simon_bit_serial_top_module_FPGA (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1752 ($_DFF_P_) from module Simon_bit_serial_top_module_FPGA (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1751 ($_DFF_P_) from module Simon_bit_serial_top_module_FPGA (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1750 ($_DFF_P_) from module Simon_bit_serial_top_module_FPGA (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1749 ($_DFF_P_) from module Simon_bit_serial_top_module_FPGA (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1741 ($_DFF_P_) from module Simon_bit_serial_top_module_FPGA (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1740 ($_DFF_P_) from module Simon_bit_serial_top_module_FPGA (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1418 ($_DFF_P_) from module Simon_bit_serial_top_module_FPGA (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1966 ($_DFF_P_) from module Simon_bit_serial_top_module_FPGA (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1821 ($_DFF_P_) from module Simon_bit_serial_top_module_FPGA (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1359 ($_DFF_P_) from module Simon_bit_serial_top_module_FPGA (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1346 ($_DFF_P_) from module Simon_bit_serial_top_module_FPGA (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1281 ($_DFF_P_) from module Simon_bit_serial_top_module_FPGA (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1819 ($_DFF_P_) from module Simon_bit_serial_top_module_FPGA (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1754 ($_DFF_P_) from module Simon_bit_serial_top_module_FPGA (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1207 ($_DFF_P_) from module Simon_bit_serial_top_module_FPGA (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1371 ($_DFF_P_) from module Simon_bit_serial_top_module_FPGA (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1370 ($_DFF_P_) from module Simon_bit_serial_top_module_FPGA (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1206 ($_DFF_P_) from module Simon_bit_serial_top_module_FPGA (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1202 ($_DFF_P_) from module Simon_bit_serial_top_module_FPGA (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1204 ($_DFF_P_) from module Simon_bit_serial_top_module_FPGA (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1214 ($_DFF_P_) from module Simon_bit_serial_top_module_FPGA (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1215 ($_DFF_P_) from module Simon_bit_serial_top_module_FPGA (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1374 ($_DFF_P_) from module Simon_bit_serial_top_module_FPGA (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1943 ($_DFF_P_) from module Simon_bit_serial_top_module_FPGA (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1201 ($_DFF_P_) from module Simon_bit_serial_top_module_FPGA (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1624 ($_DFF_P_) from module Simon_bit_serial_top_module_FPGA (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1612 ($_DFF_P_) from module Simon_bit_serial_top_module_FPGA (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1610 ($_DFF_P_) from module Simon_bit_serial_top_module_FPGA (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1609 ($_DFF_P_) from module Simon_bit_serial_top_module_FPGA (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1608 ($_DFF_P_) from module Simon_bit_serial_top_module_FPGA (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1420 ($_DFF_P_) from module Simon_bit_serial_top_module_FPGA (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1419 ($_DFF_P_) from module Simon_bit_serial_top_module_FPGA (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1936 ($_DFF_P_) from module Simon_bit_serial_top_module_FPGA (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1934 ($_DFF_P_) from module Simon_bit_serial_top_module_FPGA (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1933 ($_DFF_P_) from module Simon_bit_serial_top_module_FPGA (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1932 ($_DFF_P_) from module Simon_bit_serial_top_module_FPGA (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1931 ($_DFF_P_) from module Simon_bit_serial_top_module_FPGA (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1928 ($_DFF_P_) from module Simon_bit_serial_top_module_FPGA (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1927 ($_DFF_P_) from module Simon_bit_serial_top_module_FPGA (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1926 ($_DFF_P_) from module Simon_bit_serial_top_module_FPGA (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1918 ($_DFF_P_) from module Simon_bit_serial_top_module_FPGA (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1857 ($_DFF_P_) from module Simon_bit_serial_top_module_FPGA (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1285 ($_DFF_P_) from module Simon_bit_serial_top_module_FPGA (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1310 ($_DFF_P_) from module Simon_bit_serial_top_module_FPGA (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1291 ($_DFF_P_) from module Simon_bit_serial_top_module_FPGA (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1292 ($_DFF_P_) from module Simon_bit_serial_top_module_FPGA (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1293 ($_DFF_P_) from module Simon_bit_serial_top_module_FPGA (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1294 ($_DFF_P_) from module Simon_bit_serial_top_module_FPGA (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1295 ($_DFF_P_) from module Simon_bit_serial_top_module_FPGA (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1296 ($_DFF_P_) from module Simon_bit_serial_top_module_FPGA (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1297 ($_DFF_P_) from module Simon_bit_serial_top_module_FPGA (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1298 ($_DFF_P_) from module Simon_bit_serial_top_module_FPGA (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1299 ($_DFF_P_) from module Simon_bit_serial_top_module_FPGA (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1300 ($_DFF_P_) from module Simon_bit_serial_top_module_FPGA (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1301 ($_DFF_P_) from module Simon_bit_serial_top_module_FPGA (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1302 ($_DFF_P_) from module Simon_bit_serial_top_module_FPGA (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1303 ($_DFF_P_) from module Simon_bit_serial_top_module_FPGA (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1304 ($_DFF_P_) from module Simon_bit_serial_top_module_FPGA (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1305 ($_DFF_P_) from module Simon_bit_serial_top_module_FPGA (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1306 ($_DFF_P_) from module Simon_bit_serial_top_module_FPGA (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1311 ($_DFF_P_) from module Simon_bit_serial_top_module_FPGA (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1312 ($_DFF_P_) from module Simon_bit_serial_top_module_FPGA (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1313 ($_DFF_P_) from module Simon_bit_serial_top_module_FPGA (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1307 ($_DFF_P_) from module Simon_bit_serial_top_module_FPGA (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1308 ($_DFF_P_) from module Simon_bit_serial_top_module_FPGA (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1309 ($_DFF_P_) from module Simon_bit_serial_top_module_FPGA (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1289 ($_DFF_P_) from module Simon_bit_serial_top_module_FPGA (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1287 ($_DFF_P_) from module Simon_bit_serial_top_module_FPGA (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1290 ($_DFF_P_) from module Simon_bit_serial_top_module_FPGA (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1286 ($_DFF_P_) from module Simon_bit_serial_top_module_FPGA (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1205 ($_DFF_P_) from module Simon_bit_serial_top_module_FPGA (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1245 ($_DFF_P_) from module Simon_bit_serial_top_module_FPGA (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1217 ($_DFF_P_) from module Simon_bit_serial_top_module_FPGA (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1244 ($_DFF_P_) from module Simon_bit_serial_top_module_FPGA (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1288 ($_DFF_P_) from module Simon_bit_serial_top_module_FPGA (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1326 ($_DFF_P_) from module Simon_bit_serial_top_module_FPGA (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1338 ($_DFF_P_) from module Simon_bit_serial_top_module_FPGA (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1344 ($_DFF_P_) from module Simon_bit_serial_top_module_FPGA (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1339 ($_DFF_P_) from module Simon_bit_serial_top_module_FPGA (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1324 ($_DFF_P_) from module Simon_bit_serial_top_module_FPGA (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1330 ($_DFF_P_) from module Simon_bit_serial_top_module_FPGA (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1334 ($_DFF_P_) from module Simon_bit_serial_top_module_FPGA (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1319 ($_DFF_P_) from module Simon_bit_serial_top_module_FPGA (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1336 ($_DFF_P_) from module Simon_bit_serial_top_module_FPGA (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1337 ($_DFF_P_) from module Simon_bit_serial_top_module_FPGA (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1341 ($_DFF_P_) from module Simon_bit_serial_top_module_FPGA (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1342 ($_DFF_P_) from module Simon_bit_serial_top_module_FPGA (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1343 ($_DFF_P_) from module Simon_bit_serial_top_module_FPGA (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1316 ($_DFF_P_) from module Simon_bit_serial_top_module_FPGA (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1317 ($_DFF_P_) from module Simon_bit_serial_top_module_FPGA (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1318 ($_DFF_P_) from module Simon_bit_serial_top_module_FPGA (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1320 ($_DFF_P_) from module Simon_bit_serial_top_module_FPGA (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1321 ($_DFF_P_) from module Simon_bit_serial_top_module_FPGA (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1322 ($_DFF_P_) from module Simon_bit_serial_top_module_FPGA (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1325 ($_DFF_P_) from module Simon_bit_serial_top_module_FPGA (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1327 ($_DFF_P_) from module Simon_bit_serial_top_module_FPGA (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1328 ($_DFF_P_) from module Simon_bit_serial_top_module_FPGA (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1329 ($_DFF_P_) from module Simon_bit_serial_top_module_FPGA (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1331 ($_DFF_P_) from module Simon_bit_serial_top_module_FPGA (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1333 ($_DFF_P_) from module Simon_bit_serial_top_module_FPGA (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1335 ($_DFF_P_) from module Simon_bit_serial_top_module_FPGA (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1323 ($_DFF_P_) from module Simon_bit_serial_top_module_FPGA (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1340 ($_DFF_P_) from module Simon_bit_serial_top_module_FPGA (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1314 ($_DFF_P_) from module Simon_bit_serial_top_module_FPGA (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1332 ($_DFF_P_) from module Simon_bit_serial_top_module_FPGA (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1315 ($_DFF_P_) from module Simon_bit_serial_top_module_FPGA (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1247 ($_DFF_P_) from module Simon_bit_serial_top_module_FPGA (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1216 ($_DFF_P_) from module Simon_bit_serial_top_module_FPGA (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1226 ($_DFF_P_) from module Simon_bit_serial_top_module_FPGA (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1227 ($_DFF_P_) from module Simon_bit_serial_top_module_FPGA (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1228 ($_DFF_P_) from module Simon_bit_serial_top_module_FPGA (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1229 ($_DFF_P_) from module Simon_bit_serial_top_module_FPGA (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1230 ($_DFF_P_) from module Simon_bit_serial_top_module_FPGA (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1231 ($_DFF_P_) from module Simon_bit_serial_top_module_FPGA (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1232 ($_DFF_P_) from module Simon_bit_serial_top_module_FPGA (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1233 ($_DFF_P_) from module Simon_bit_serial_top_module_FPGA (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1234 ($_DFF_P_) from module Simon_bit_serial_top_module_FPGA (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1235 ($_DFF_P_) from module Simon_bit_serial_top_module_FPGA (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1236 ($_DFF_P_) from module Simon_bit_serial_top_module_FPGA (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1237 ($_DFF_P_) from module Simon_bit_serial_top_module_FPGA (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1238 ($_DFF_P_) from module Simon_bit_serial_top_module_FPGA (removing D path).
Handling const CLK on $auto$ff.cc:262:slice$1239 ($_DFF_P_) from module Simon_bit_serial_top_module_FPGA (removing D path).

9.90. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Simon_bit_serial_top_module_FPGA..
Removed 45 unused cells and 782 unused wires.
<suppressed ~46 debug messages>

9.91. Executing OPT_EXPR pass (perform const folding).
Optimizing module Simon_bit_serial_top_module_FPGA.
<suppressed ~84 debug messages>

9.92. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \Simon_bit_serial_top_module_FPGA..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

9.93. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \Simon_bit_serial_top_module_FPGA.
Performed a total of 0 changes.

9.94. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Simon_bit_serial_top_module_FPGA'.
<suppressed ~36 debug messages>
Removed a total of 12 cells.

9.95. Executing OPT_SHARE pass.

9.96. Executing OPT_DFF pass (perform DFF optimizations).

9.97. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Simon_bit_serial_top_module_FPGA..
Removed 0 unused cells and 96 unused wires.
<suppressed ~1 debug messages>

9.98. Executing OPT_EXPR pass (perform const folding).
Optimizing module Simon_bit_serial_top_module_FPGA.
<suppressed ~1 debug messages>

9.99. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \Simon_bit_serial_top_module_FPGA..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

9.100. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \Simon_bit_serial_top_module_FPGA.
Performed a total of 0 changes.

9.101. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Simon_bit_serial_top_module_FPGA'.
Removed a total of 0 cells.

9.102. Executing OPT_SHARE pass.

9.103. Executing OPT_DFF pass (perform DFF optimizations).

9.104. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Simon_bit_serial_top_module_FPGA..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

9.105. Executing OPT_EXPR pass (perform const folding).
Optimizing module Simon_bit_serial_top_module_FPGA.
MAX OPT ITERATION = 3

9.106. Executing OPT_EXPR pass (perform const folding).
Optimizing module Simon_bit_serial_top_module_FPGA.
<suppressed ~15 debug messages>

9.107. Executing TECHMAP pass (map to technology primitives).

9.107.1. Executing Verilog-2005 frontend: /nfs_cadtools/raptor/08_23_2022_08_00_01/bin/../share/yosys/techmap.v
Parsing Verilog input from `/nfs_cadtools/raptor/08_23_2022_08_00_01/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

9.107.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~71 debug messages>

9.108. Executing OPT_EXPR pass (perform const folding).
Optimizing module Simon_bit_serial_top_module_FPGA.

9.109. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Simon_bit_serial_top_module_FPGA'.
Removed a total of 0 cells.

9.110. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \Simon_bit_serial_top_module_FPGA..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

9.111. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \Simon_bit_serial_top_module_FPGA.
Performed a total of 0 changes.

9.112. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Simon_bit_serial_top_module_FPGA'.
Removed a total of 0 cells.

9.113. Executing OPT_DFF pass (perform DFF optimizations).

9.114. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Simon_bit_serial_top_module_FPGA..
Removed 1 unused cells and 8 unused wires.
<suppressed ~2 debug messages>

9.115. Executing OPT_EXPR pass (perform const folding).
Optimizing module Simon_bit_serial_top_module_FPGA.

9.116. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \Simon_bit_serial_top_module_FPGA..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

9.117. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \Simon_bit_serial_top_module_FPGA.
Performed a total of 0 changes.

9.118. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Simon_bit_serial_top_module_FPGA'.
Removed a total of 0 cells.

9.119. Executing OPT_DFF pass (perform DFF optimizations).

9.120. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Simon_bit_serial_top_module_FPGA..

9.121. Executing OPT_EXPR pass (perform const folding).
Optimizing module Simon_bit_serial_top_module_FPGA.
MAX OPT ITERATION = 2

9.122. Executing ABC pass (technology mapping using ABC).

9.122.1. Summary of detected clock domains:
  38 cells in clk=\clock0, en=$auto$opt_dff.cc:194:make_patterns_logic$393, arst={ }, srst={ }
  64 cells in clk=\clock0, en=$auto$opt_dff.cc:194:make_patterns_logic$372, arst={ }, srst={ }
  45 cells in clk=\clock0, en=\key_exp.lut_ff_enable, arst={ }, srst={ }
  153 cells in clk=\clock0, en=\key_exp.fifo_ff_enable, arst={ }, srst={ }
  157 cells in clk=\clock0, en=\datapath.shifter_enable1, arst={ }, srst={ }
  40 cells in clk=\clock0, en={ }, arst={ }, srst={ }

9.122.2. Extracting gate netlist of module `\Simon_bit_serial_top_module_FPGA' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock0, enabled by $auto$opt_dff.cc:194:make_patterns_logic$393
Extracted 38 gates and 43 wires to a netlist network with 4 inputs and 16 outputs.

9.122.2.1. Executing ABC.

9.122.3. Extracting gate netlist of module `\Simon_bit_serial_top_module_FPGA' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock0, enabled by $auto$opt_dff.cc:194:make_patterns_logic$372
Extracted 64 gates and 76 wires to a netlist network with 11 inputs and 26 outputs.

9.122.3.1. Executing ABC.

9.122.4. Extracting gate netlist of module `\Simon_bit_serial_top_module_FPGA' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock0, enabled by \key_exp.lut_ff_enable
Extracted 45 gates and 71 wires to a netlist network with 26 inputs and 9 outputs.

9.122.4.1. Executing ABC.

9.122.5. Extracting gate netlist of module `\Simon_bit_serial_top_module_FPGA' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock0, enabled by \key_exp.fifo_ff_enable
Extracted 153 gates and 171 wires to a netlist network with 16 inputs and 7 outputs.

9.122.5.1. Executing ABC.

9.122.6. Extracting gate netlist of module `\Simon_bit_serial_top_module_FPGA' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock0, enabled by \datapath.shifter_enable1
Extracted 157 gates and 172 wires to a netlist network with 15 inputs and 5 outputs.

9.122.6.1. Executing ABC.

9.122.7. Extracting gate netlist of module `\Simon_bit_serial_top_module_FPGA' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock0
Extracted 40 gates and 56 wires to a netlist network with 14 inputs and 6 outputs.

9.122.7.1. Executing ABC.

9.123. Executing ABC pass (technology mapping using ABC).

9.123.1. Summary of detected clock domains:
  65 cells in clk=\clock0, en=$abc$2769$auto$opt_dff.cc:194:make_patterns_logic$372, arst={ }, srst={ }
  39 cells in clk=\clock0, en=$abc$2727$auto$opt_dff.cc:194:make_patterns_logic$393, arst={ }, srst={ }
  39 cells in clk=\clock0, en=$abc$2840$key_exp.lut_ff_enable, arst={ }, srst={ }
  139 cells in clk=\clock0, en=$abc$2874$key_exp.fifo_ff_enable, arst={ }, srst={ }
  151 cells in clk=\clock0, en=$abc$3151$datapath.shifter_enable1, arst={ }, srst={ }
  52 cells in clk=\clock0, en={ }, arst={ }, srst={ }

9.123.2. Extracting gate netlist of module `\Simon_bit_serial_top_module_FPGA' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock0, enabled by $abc$2769$auto$opt_dff.cc:194:make_patterns_logic$372
Extracted 65 gates and 84 wires to a netlist network with 19 inputs and 34 outputs.

9.123.2.1. Executing ABC.

9.123.3. Extracting gate netlist of module `\Simon_bit_serial_top_module_FPGA' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock0, enabled by $abc$2727$auto$opt_dff.cc:194:make_patterns_logic$393
Extracted 39 gates and 42 wires to a netlist network with 3 inputs and 15 outputs.

9.123.3.1. Executing ABC.

9.123.4. Extracting gate netlist of module `\Simon_bit_serial_top_module_FPGA' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock0, enabled by $abc$2840$key_exp.lut_ff_enable
Extracted 39 gates and 66 wires to a netlist network with 27 inputs and 6 outputs.

9.123.4.1. Executing ABC.

9.123.5. Extracting gate netlist of module `\Simon_bit_serial_top_module_FPGA' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock0, enabled by $abc$2874$key_exp.fifo_ff_enable
Extracted 139 gates and 149 wires to a netlist network with 10 inputs and 7 outputs.

9.123.5.1. Executing ABC.

9.123.6. Extracting gate netlist of module `\Simon_bit_serial_top_module_FPGA' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock0, enabled by $abc$3151$datapath.shifter_enable1
Extracted 151 gates and 166 wires to a netlist network with 15 inputs and 8 outputs.

9.123.6.1. Executing ABC.

9.123.7. Extracting gate netlist of module `\Simon_bit_serial_top_module_FPGA' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock0
Extracted 52 gates and 69 wires to a netlist network with 17 inputs and 5 outputs.

9.123.7.1. Executing ABC.

9.124. Executing ABC pass (technology mapping using ABC).

9.124.1. Summary of detected clock domains:
  61 cells in clk=\clock0, en=$abc$3488$abc$2769$auto$opt_dff.cc:194:make_patterns_logic$372, arst={ }, srst={ }
  39 cells in clk=\clock0, en=$abc$3559$abc$2727$auto$opt_dff.cc:194:make_patterns_logic$393, arst={ }, srst={ }
  32 cells in clk=\clock0, en=$abc$3599$abc$2840$key_exp.lut_ff_enable, arst={ }, srst={ }
  145 cells in clk=\clock0, en=$abc$3638$abc$2874$key_exp.fifo_ff_enable, arst={ }, srst={ }
  152 cells in clk=\clock0, en=$abc$3908$abc$3151$datapath.shifter_enable1, arst={ }, srst={ }
  59 cells in clk=\clock0, en={ }, arst={ }, srst={ }

9.124.2. Extracting gate netlist of module `\Simon_bit_serial_top_module_FPGA' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock0, enabled by $abc$3488$abc$2769$auto$opt_dff.cc:194:make_patterns_logic$372
Extracted 61 gates and 77 wires to a netlist network with 16 inputs and 36 outputs.

9.124.2.1. Executing ABC.

9.124.3. Extracting gate netlist of module `\Simon_bit_serial_top_module_FPGA' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock0, enabled by $abc$3559$abc$2727$auto$opt_dff.cc:194:make_patterns_logic$393
Extracted 39 gates and 41 wires to a netlist network with 2 inputs and 15 outputs.

9.124.3.1. Executing ABC.

9.124.4. Extracting gate netlist of module `\Simon_bit_serial_top_module_FPGA' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock0, enabled by $abc$3599$abc$2840$key_exp.lut_ff_enable
Extracted 32 gates and 58 wires to a netlist network with 26 inputs and 7 outputs.

9.124.4.1. Executing ABC.

9.124.5. Extracting gate netlist of module `\Simon_bit_serial_top_module_FPGA' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock0, enabled by $abc$3638$abc$2874$key_exp.fifo_ff_enable
Extracted 145 gates and 160 wires to a netlist network with 15 inputs and 8 outputs.

9.124.5.1. Executing ABC.

9.124.6. Extracting gate netlist of module `\Simon_bit_serial_top_module_FPGA' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock0, enabled by $abc$3908$abc$3151$datapath.shifter_enable1
Extracted 152 gates and 166 wires to a netlist network with 14 inputs and 5 outputs.

9.124.6.1. Executing ABC.

9.124.7. Extracting gate netlist of module `\Simon_bit_serial_top_module_FPGA' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock0
Extracted 59 gates and 80 wires to a netlist network with 21 inputs and 5 outputs.

9.124.7.1. Executing ABC.

9.125. Executing ABC pass (technology mapping using ABC).

9.125.1. Summary of detected clock domains:
  62 cells in clk=\clock0, en=$abc$4255$abc$3488$abc$2769$auto$opt_dff.cc:194:make_patterns_logic$372, arst={ }, srst={ }
  39 cells in clk=\clock0, en=$abc$4318$abc$3559$abc$2727$auto$opt_dff.cc:194:make_patterns_logic$393, arst={ }, srst={ }
  24 cells in clk=\clock0, en=$abc$4358$abc$3599$abc$2840$key_exp.lut_ff_enable, arst={ }, srst={ }
  154 cells in clk=\clock0, en=$abc$4395$abc$3638$abc$2874$key_exp.fifo_ff_enable, arst={ }, srst={ }
  147 cells in clk=\clock0, en=$abc$4669$abc$3908$abc$3151$datapath.shifter_enable1, arst={ }, srst={ }
  57 cells in clk=\clock0, en={ }, arst={ }, srst={ }

9.125.2. Extracting gate netlist of module `\Simon_bit_serial_top_module_FPGA' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock0, enabled by $abc$4255$abc$3488$abc$2769$auto$opt_dff.cc:194:make_patterns_logic$372
Extracted 62 gates and 80 wires to a netlist network with 18 inputs and 36 outputs.

9.125.2.1. Executing ABC.

9.125.3. Extracting gate netlist of module `\Simon_bit_serial_top_module_FPGA' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock0, enabled by $abc$4318$abc$3559$abc$2727$auto$opt_dff.cc:194:make_patterns_logic$393
Extracted 39 gates and 41 wires to a netlist network with 2 inputs and 15 outputs.

9.125.3.1. Executing ABC.

9.125.4. Extracting gate netlist of module `\Simon_bit_serial_top_module_FPGA' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock0, enabled by $abc$4358$abc$3599$abc$2840$key_exp.lut_ff_enable
Extracted 24 gates and 43 wires to a netlist network with 19 inputs and 8 outputs.

9.125.4.1. Executing ABC.

9.125.5. Extracting gate netlist of module `\Simon_bit_serial_top_module_FPGA' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock0, enabled by $abc$4395$abc$3638$abc$2874$key_exp.fifo_ff_enable
Extracted 154 gates and 176 wires to a netlist network with 22 inputs and 8 outputs.

9.125.5.1. Executing ABC.

9.125.6. Extracting gate netlist of module `\Simon_bit_serial_top_module_FPGA' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock0, enabled by $abc$4669$abc$3908$abc$3151$datapath.shifter_enable1
Extracted 147 gates and 161 wires to a netlist network with 14 inputs and 6 outputs.

9.125.6.1. Executing ABC.

9.125.7. Extracting gate netlist of module `\Simon_bit_serial_top_module_FPGA' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock0
Extracted 57 gates and 78 wires to a netlist network with 21 inputs and 5 outputs.

9.125.7.1. Executing ABC.

9.126. Executing OPT_FFINV pass (push inverters through FFs).
Discovering LUTs.
Pushed 0 inverters.

9.127. Executing OPT_EXPR pass (perform const folding).
Optimizing module Simon_bit_serial_top_module_FPGA.
<suppressed ~8 debug messages>

9.128. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Simon_bit_serial_top_module_FPGA'.
<suppressed ~18 debug messages>
Removed a total of 6 cells.

9.129. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \Simon_bit_serial_top_module_FPGA..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

9.130. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \Simon_bit_serial_top_module_FPGA.
Performed a total of 0 changes.

9.131. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Simon_bit_serial_top_module_FPGA'.
Removed a total of 0 cells.

9.132. Executing OPT_SHARE pass.

9.133. Executing OPT_DFF pass (perform DFF optimizations).

9.134. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Simon_bit_serial_top_module_FPGA..
Removed 1 unused cells and 3115 unused wires.
<suppressed ~53 debug messages>

9.135. Executing OPT_EXPR pass (perform const folding).
Optimizing module Simon_bit_serial_top_module_FPGA.

9.136. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \Simon_bit_serial_top_module_FPGA..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

9.137. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \Simon_bit_serial_top_module_FPGA.
Performed a total of 0 changes.

9.138. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Simon_bit_serial_top_module_FPGA'.
Removed a total of 0 cells.

9.139. Executing OPT_SHARE pass.

9.140. Executing OPT_DFF pass (perform DFF optimizations).

9.141. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Simon_bit_serial_top_module_FPGA..

9.142. Executing OPT_EXPR pass (perform const folding).
Optimizing module Simon_bit_serial_top_module_FPGA.
MAX OPT ITERATION = 2

9.143. Executing BMUXMAP pass.

9.144. Executing DEMUXMAP pass.

9.145. Executing ABC pass (technology mapping using ABC).

9.145.1. Extracting gate netlist of module `\Simon_bit_serial_top_module_FPGA' to `<abc-temp-dir>/input.blif'..
Extracted 187 gates and 218 wires to a netlist network with 31 inputs and 26 outputs.

9.145.1.1. Executing ABC.
DE:   #PIs =  31  #Luts =    56  Max Lvl =   4  Avg Lvl =   2.08  [   0.04 sec. at Pass 0]
DE:   #PIs =  31  #Luts =    56  Max Lvl =   4  Avg Lvl =   2.08  [   0.19 sec. at Pass 1]
DE:   #PIs =  31  #Luts =    47  Max Lvl =   4  Avg Lvl =   1.92  [   0.09 sec. at Pass 2]
DE:   #PIs =  31  #Luts =    42  Max Lvl =   4  Avg Lvl =   1.88  [   0.08 sec. at Pass 3]
DE:   #PIs =  31  #Luts =    42  Max Lvl =   4  Avg Lvl =   1.88  [   0.10 sec. at Pass 4]
DE:   #PIs =  31  #Luts =    42  Max Lvl =   4  Avg Lvl =   1.88  [   0.08 sec. at Pass 5]
DE:   #PIs =  31  #Luts =    42  Max Lvl =   4  Avg Lvl =   1.88  [   0.11 sec. at Pass 6]
DE:   #PIs =  31  #Luts =    42  Max Lvl =   4  Avg Lvl =   1.88  [   0.00 sec. at Pass 7]
DE:   #PIs =  31  #Luts =    42  Max Lvl =   4  Avg Lvl =   1.88  [   0.00 sec. at Pass 8]

9.146. Executing OPT_EXPR pass (perform const folding).
Optimizing module Simon_bit_serial_top_module_FPGA.

9.147. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Simon_bit_serial_top_module_FPGA'.
Removed a total of 0 cells.

9.148. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \Simon_bit_serial_top_module_FPGA..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

9.149. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \Simon_bit_serial_top_module_FPGA.
Performed a total of 0 changes.

9.150. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Simon_bit_serial_top_module_FPGA'.
Removed a total of 0 cells.

9.151. Executing OPT_SHARE pass.

9.152. Executing OPT_DFF pass (perform DFF optimizations).

9.153. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Simon_bit_serial_top_module_FPGA..
Removed 0 unused cells and 207 unused wires.
<suppressed ~5 debug messages>

9.154. Executing OPT_EXPR pass (perform const folding).
Optimizing module Simon_bit_serial_top_module_FPGA.
MAX OPT ITERATION = 1

9.155. Executing OPT_FFINV pass (push inverters through FFs).
Discovering LUTs.
Pushed 0 inverters.

9.156. Printing statistics.

=== Simon_bit_serial_top_module_FPGA ===

   Number of wires:                343
   Number of wire bits:            428
   Number of public wires:          27
   Number of public wire bits:     112
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                322
     $_DFFE_PN_                      7
     $_DFFE_PP_                    266
     $_DFF_P_                        9
     $lut                           40

9.157. Executing SHREGMAP pass (map shift registers).
Converted 0 dff cells into 0 shift registers.

9.158. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).

9.159. Printing statistics.

=== Simon_bit_serial_top_module_FPGA ===

   Number of wires:                343
   Number of wire bits:            428
   Number of public wires:          27
   Number of public wire bits:     112
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                322
     $_DFFE_PP0N_                    7
     $_DFFE_PP0P_                  266
     $_DFF_P_                        9
     $lut                           40

9.160. Executing TECHMAP pass (map to technology primitives).

9.160.1. Executing Verilog-2005 frontend: /nfs_cadtools/raptor/08_23_2022_08_00_01/bin/../share/yosys/techmap.v
Parsing Verilog input from `/nfs_cadtools/raptor/08_23_2022_08_00_01/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

9.160.2. Executing Verilog-2005 frontend: /nfs_cadtools/raptor/08_23_2022_08_00_01/bin/../share/yosys/rapidsilicon/genesis/ffs_map.v
Parsing Verilog input from `/nfs_cadtools/raptor/08_23_2022_08_00_01/bin/../share/yosys/rapidsilicon/genesis/ffs_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_PP0P_'.
Generating RTLIL representation for module `\$_DFFE_PP0N_'.
Generating RTLIL representation for module `\$_DFFE_PN0P_'.
Generating RTLIL representation for module `\$_DFFE_PN0N_'.
Generating RTLIL representation for module `\$_DFFE_PP1P_'.
Generating RTLIL representation for module `\$_DFFE_PP1N_'.
Generating RTLIL representation for module `\$_DFFE_PN1P_'.
Generating RTLIL representation for module `\$_DFFE_PN1N_'.
Generating RTLIL representation for module `\$_DFFSR_PPP_'.
Generating RTLIL representation for module `\$_DFFSR_PNP_'.
Generating RTLIL representation for module `\$_DFFSR_PNN_'.
Generating RTLIL representation for module `\$_DFFSR_PPN_'.
Generating RTLIL representation for module `\$_DFFSR_NPP_'.
Generating RTLIL representation for module `\$_DFFSR_NNP_'.
Generating RTLIL representation for module `\$_DFFSR_NNN_'.
Generating RTLIL representation for module `\$_DFFSR_NPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PPPP_'.
Generating RTLIL representation for module `\$_DFFSRE_PNPP_'.
Generating RTLIL representation for module `\$_DFFSRE_PPNP_'.
Generating RTLIL representation for module `\$_DFFSRE_PNNP_'.
Generating RTLIL representation for module `\$_DFFSRE_PPPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PNPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PPNN_'.
Generating RTLIL representation for module `\$_DFFSRE_PNNN_'.
Generating RTLIL representation for module `\$_DLATCHSR_PPP_'.
Generating RTLIL representation for module `\$_DLATCHSR_NPP_'.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_NP0P_'.
Generating RTLIL representation for module `\$_DFFE_NP0N_'.
Generating RTLIL representation for module `\$_DFFE_NN0P_'.
Generating RTLIL representation for module `\$_DFFE_NN0N_'.
Generating RTLIL representation for module `\$_DFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFFE_NP1N_'.
Generating RTLIL representation for module `\$_DFFE_NN1P_'.
Generating RTLIL representation for module `\$_DFFE_NN1N_'.
Generating RTLIL representation for module `\$_DFFSRE_NPPP_'.
Generating RTLIL representation for module `\$_DFFSRE_NNPP_'.
Generating RTLIL representation for module `\$_DFFSRE_NPNP_'.
Generating RTLIL representation for module `\$_DFFSRE_NNNP_'.
Generating RTLIL representation for module `\$_DFFSRE_NPPN_'.
Generating RTLIL representation for module `\$_DFFSRE_NNPN_'.
Generating RTLIL representation for module `\$_DFFSRE_NPNN_'.
Generating RTLIL representation for module `\$_DFFSRE_NNNN_'.
Generating RTLIL representation for module `\$__SHREG_DFF_P_'.
Generating RTLIL representation for module `\$_SDFF_PP0_'.
Generating RTLIL representation for module `\$_SDFF_PN0_'.
Generating RTLIL representation for module `\$_SDFF_NP0_'.
Generating RTLIL representation for module `\$_SDFF_NN0_'.
Generating RTLIL representation for module `\$_SDFF_PP1_'.
Generating RTLIL representation for module `\$_SDFF_PN1_'.
Generating RTLIL representation for module `\$_SDFF_NP1_'.
Generating RTLIL representation for module `\$_SDFF_NN1_'.
Successfully finished Verilog frontend.

9.160.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $lut.
Using template \$_DFFE_PP0P_ for cells of type $_DFFE_PP0P_.
Using template \$_DFFE_PP0N_ for cells of type $_DFFE_PP0N_.
Using template \$_DFF_P_ for cells of type $_DFF_P_.
Using extmapper simplemap for cells of type $logic_not.
No more expansions possible.
<suppressed ~738 debug messages>

9.161. Executing OPT_EXPR pass (perform const folding).
Optimizing module Simon_bit_serial_top_module_FPGA.
<suppressed ~1447 debug messages>

9.162. Executing SIMPLEMAP pass (map simple cells to gate primitives).

9.163. Executing OPT_EXPR pass (perform const folding).
Optimizing module Simon_bit_serial_top_module_FPGA.

9.164. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Simon_bit_serial_top_module_FPGA'.
<suppressed ~279 debug messages>
Removed a total of 93 cells.

9.165. Executing OPT_DFF pass (perform DFF optimizations).

9.166. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Simon_bit_serial_top_module_FPGA..
Removed 0 unused cells and 1744 unused wires.
<suppressed ~1 debug messages>

9.167. Executing OPT_EXPR pass (perform const folding).
Optimizing module Simon_bit_serial_top_module_FPGA.
<suppressed ~9 debug messages>

9.168. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Simon_bit_serial_top_module_FPGA'.
Removed a total of 0 cells.

9.169. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \Simon_bit_serial_top_module_FPGA..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

9.170. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \Simon_bit_serial_top_module_FPGA.
Performed a total of 0 changes.

9.171. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Simon_bit_serial_top_module_FPGA'.
Removed a total of 0 cells.

9.172. Executing OPT_SHARE pass.

9.173. Executing OPT_DFF pass (perform DFF optimizations).

9.174. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Simon_bit_serial_top_module_FPGA..

9.175. Executing OPT_EXPR pass (perform const folding).
Optimizing module Simon_bit_serial_top_module_FPGA.
MAX OPT ITERATION = 1

9.176. Executing ABC pass (technology mapping using ABC).

9.176.1. Extracting gate netlist of module `\Simon_bit_serial_top_module_FPGA' to `<abc-temp-dir>/input.blif'..
Extracted 219 gates and 252 wires to a netlist network with 31 inputs and 24 outputs.

9.176.1.1. Executing ABC.
DE:   #PIs =  31  #Luts =    40  Max Lvl =   4  Avg Lvl =   2.04  [   0.04 sec. at Pass 0]
DE:   #PIs =  31  #Luts =    40  Max Lvl =   4  Avg Lvl =   2.04  [   0.21 sec. at Pass 1]
DE:   #PIs =  31  #Luts =    40  Max Lvl =   4  Avg Lvl =   2.04  [   0.09 sec. at Pass 2]
DE:   #PIs =  31  #Luts =    40  Max Lvl =   4  Avg Lvl =   2.04  [   0.07 sec. at Pass 3]
DE:   #PIs =  31  #Luts =    40  Max Lvl =   4  Avg Lvl =   2.04  [   0.12 sec. at Pass 4]
DE:   #PIs =  31  #Luts =    40  Max Lvl =   4  Avg Lvl =   2.04  [   0.07 sec. at Pass 5]
DE:   #PIs =  31  #Luts =    40  Max Lvl =   4  Avg Lvl =   2.04  [   0.00 sec. at Pass 6]
DE:   #PIs =  31  #Luts =    40  Max Lvl =   4  Avg Lvl =   2.04  [   0.00 sec. at Pass 7]

9.177. Executing OPT_EXPR pass (perform const folding).
Optimizing module Simon_bit_serial_top_module_FPGA.

9.178. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Simon_bit_serial_top_module_FPGA'.
Removed a total of 0 cells.

9.179. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \Simon_bit_serial_top_module_FPGA..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

9.180. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \Simon_bit_serial_top_module_FPGA.
Performed a total of 0 changes.

9.181. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Simon_bit_serial_top_module_FPGA'.
Removed a total of 0 cells.

9.182. Executing OPT_SHARE pass.

9.183. Executing OPT_DFF pass (perform DFF optimizations).

9.184. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Simon_bit_serial_top_module_FPGA..
Removed 0 unused cells and 194 unused wires.
<suppressed ~1 debug messages>

9.185. Executing OPT_EXPR pass (perform const folding).
Optimizing module Simon_bit_serial_top_module_FPGA.
MAX OPT ITERATION = 1

9.186. Executing HIERARCHY pass (managing design hierarchy).

9.186.1. Analyzing design hierarchy..
Top module:  \Simon_bit_serial_top_module_FPGA

9.186.2. Analyzing design hierarchy..
Top module:  \Simon_bit_serial_top_module_FPGA
Removed 0 unused modules.

9.187. Printing statistics.

=== Simon_bit_serial_top_module_FPGA ===

   Number of wires:                343
   Number of wire bits:            428
   Number of public wires:          27
   Number of public wire bits:     112
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                322
     $lut                           40
     dffsre                        282

9.188. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Simon_bit_serial_top_module_FPGA..
Removed 0 unused cells and 18 unused wires.
<suppressed ~18 debug messages>

10. Executing BLIF backend.

11. Executing Verilog backend.
Dumping module `\Simon_bit_serial_top_module_FPGA'.

Warnings: 4 unique messages, 4 total
End of script. Logfile hash: 083846d122, CPU: user 1.50s system 0.09s, MEM: 29.30 MB peak
Yosys 0.18+10 (git sha1 c98b0e94e, gcc 9.4.0 -fPIC -Os)
Time spent: 79% 6x abc (5 sec), 5% 33x opt_expr (0 sec), ...
