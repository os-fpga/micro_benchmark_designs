
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys-Verific 0.0.68
 Yosys 0.18+10 (git sha1 c98b0e94e, gcc 9.4.0 -fPIC -Os)


-- Executing script file `divider_top.ys' --

1. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific May22_SW_Release, released at Wed Jun  1 05:39:28 2022.

2. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific May22_SW_Release, released at Wed Jun  1 05:39:28 2022.

3. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific May22_SW_Release, released at Wed Jun  1 05:39:28 2022.

4. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific May22_SW_Release, released at Wed Jun  1 05:39:28 2022.
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file '/nfs_scratch/scratch/AE/Roman/open_source_design/divider/./divider_top.v'

5. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific May22_SW_Release, released at Wed Jun  1 05:39:28 2022.
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file '/nfs_scratch/scratch/AE/Roman/open_source_design/divider/./divider.v'

6. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific May22_SW_Release, released at Wed Jun  1 05:39:28 2022.
Adding Verilog module 'divider_top' to elaboration queue.
Running hier_tree::Elaborate().
VERIFIC-INFO [VERI-1018] /nfs_scratch/scratch/AE/Roman/open_source_design/divider/./divider_top.v:1: compiling module 'divider_top'
VERIFIC-WARNING [VERI-2580] /nfs_scratch/scratch/AE/Roman/open_source_design/divider/./divider_top.v:44: latch inferred for net 'dataA[31]'
VERIFIC-WARNING [VERI-2580] /nfs_scratch/scratch/AE/Roman/open_source_design/divider/./divider_top.v:46: latch inferred for net 'dataB[31]'
VERIFIC-INFO [VERI-1018] /nfs_scratch/scratch/AE/Roman/open_source_design/divider/./divider.v:1: compiling module 'Divide'
Importing module divider_top.
Importing module Divide.

7. Executing HIERARCHY pass (managing design hierarchy).

7.1. Analyzing design hierarchy..
Top module:  \divider_top
Used module:     \Divide

7.2. Analyzing design hierarchy..
Top module:  \divider_top
Used module:     \Divide
Removed 0 unused modules.

8. Executing synth_rs pass: v0.4.68

8.1. Executing Verilog-2005 frontend: /nfs_cadtools/raptor/08_23_2022_08_00_01/bin/../share/yosys/rapidsilicon/common/cells_sim.v
Parsing Verilog input from `/nfs_cadtools/raptor/08_23_2022_08_00_01/bin/../share/yosys/rapidsilicon/common/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\inv'.
Generating RTLIL representation for module `\buff'.
Generating RTLIL representation for module `\logic_0'.
Generating RTLIL representation for module `\logic_1'.
Generating RTLIL representation for module `\gclkbuff'.
Successfully finished Verilog frontend.

8.2. Executing Verilog-2005 frontend: /nfs_cadtools/raptor/08_23_2022_08_00_01/bin/../share/yosys/rapidsilicon/genesis/cells_sim.v
Parsing Verilog input from `/nfs_cadtools/raptor/08_23_2022_08_00_01/bin/../share/yosys/rapidsilicon/genesis/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\dffsre'.
Generating RTLIL representation for module `\dffnsre'.
Generating RTLIL representation for module `\latchsre'.
Generating RTLIL representation for module `\latchnsre'.
Generating RTLIL representation for module `\io_scff'.
Generating RTLIL representation for module `\scff'.
Generating RTLIL representation for module `\sh_dff'.
Generating RTLIL representation for module `\adder_carry'.
Generating RTLIL representation for module `\sdffr'.
Generating RTLIL representation for module `\sdffs'.
Generating RTLIL representation for module `\TDP_BRAM18'.
Generating RTLIL representation for module `\TDP36K'.
Successfully finished Verilog frontend.

8.3. Executing Verilog-2005 frontend: /nfs_cadtools/raptor/08_23_2022_08_00_01/bin/../share/yosys/rapidsilicon/genesis/dsp_sim.v
Parsing Verilog input from `/nfs_cadtools/raptor/08_23_2022_08_00_01/bin/../share/yosys/rapidsilicon/genesis/dsp_sim.v' to AST representation.
Generating RTLIL representation for module `\RS_DSP1'.
Generating RTLIL representation for module `\RS_DSP2'.
Generating RTLIL representation for module `\RS_DSP2_MULT'.
Generating RTLIL representation for module `\RS_DSP2_MULT_REGIN'.
Generating RTLIL representation for module `\RS_DSP2_MULT_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULT_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD_REGIN'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC_REGIN'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC_REGIN_REGOUT'.
Generating RTLIL representation for module `\dsp_t1_20x18x64_cfg_ports'.
Generating RTLIL representation for module `\dsp_t1_10x9x32_cfg_ports'.
Generating RTLIL representation for module `\dsp_t1_sim_cfg_ports'.
Generating RTLIL representation for module `\RS_DSP3'.
Generating RTLIL representation for module `\RS_DSP3_MULT'.
Generating RTLIL representation for module `\RS_DSP3_MULT_REGIN'.
Generating RTLIL representation for module `\RS_DSP3_MULT_REGOUT'.
Generating RTLIL representation for module `\RS_DSP3_MULT_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP3_MULTADD'.
Generating RTLIL representation for module `\RS_DSP3_MULTADD_REGIN'.
Generating RTLIL representation for module `\RS_DSP3_MULTADD_REGOUT'.
Generating RTLIL representation for module `\RS_DSP3_MULTADD_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP3_MULTACC'.
Generating RTLIL representation for module `\RS_DSP3_MULTACC_REGIN'.
Generating RTLIL representation for module `\RS_DSP3_MULTACC_REGOUT'.
Generating RTLIL representation for module `\RS_DSP3_MULTACC_REGIN_REGOUT'.
Generating RTLIL representation for module `\dsp_t1_20x18x64_cfg_params'.
Generating RTLIL representation for module `\dsp_t1_10x9x32_cfg_params'.
Generating RTLIL representation for module `\dsp_t1_sim_cfg_params'.
Successfully finished Verilog frontend.

8.4. Executing HIERARCHY pass (managing design hierarchy).

8.4.1. Analyzing design hierarchy..
Top module:  \divider_top
Used module:     \Divide

8.4.2. Analyzing design hierarchy..
Top module:  \divider_top
Used module:     \Divide
Removed 0 unused modules.

8.5. Executing PROC pass (convert processes to netlists).

8.5.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

8.5.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

8.5.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

8.5.4. Executing PROC_INIT pass (extract init attributes).

8.5.5. Executing PROC_ARST pass (detect async resets in processes).

8.5.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

8.5.7. Executing PROC_MUX pass (convert decision trees to multiplexers).

8.5.8. Executing PROC_DLATCH pass (convert process syncs to latches).

8.5.9. Executing PROC_DFF pass (convert process syncs to FFs).

8.5.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

8.5.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

8.5.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module Divide.
<suppressed ~5 debug messages>
Optimizing module divider_top.
<suppressed ~6 debug messages>

8.6. Executing DEMUXMAP pass.

8.7. Executing FLATTEN pass (flatten design).
Deleting now unused module Divide.
<suppressed ~1 debug messages>

8.8. Executing DEMUXMAP pass.

8.9. Executing TRIBUF pass.

8.10. Executing DEMINOUT pass (demote inout ports to input or output).

8.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module divider_top.

8.12. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \divider_top..
Removed 28 unused cells and 202 unused wires.
<suppressed ~64 debug messages>

8.13. Executing CHECK pass (checking for obvious problems).
Checking module divider_top...
Warning: Wire divider_top.\err is used but has no driver.
Found and reported 1 problems.

8.14. Executing OPT_EXPR pass (perform const folding).
Optimizing module divider_top.

8.15. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\divider_top'.
Removed a total of 0 cells.

8.16. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \divider_top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
      Replacing known input bits on port A of cell $flatten\Divide_u.$verific$i27$/nfs_scratch/scratch/AE/Roman/open_source_design/divider/./divider.v:47$240: \Divide_u.active -> 1'1
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

8.17. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \divider_top.
Performed a total of 0 changes.

8.18. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\divider_top'.
Removed a total of 0 cells.

8.19. Executing OPT_SHARE pass.

8.20. Executing OPT_DFF pass (perform DFF optimizations).
Changing const-value async load to async reset on $flatten\Divide_u.$verific$cycle_reg$/nfs_scratch/scratch/AE/Roman/open_source_design/divider/./divider.v:58$257 ($aldff) from module divider_top.
Changing const-value async load to async reset on $flatten\Divide_u.$verific$active_reg$/nfs_scratch/scratch/AE/Roman/open_source_design/divider/./divider.v:58$256 ($aldff) from module divider_top.

8.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \divider_top..

8.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module divider_top.
MAX OPT ITERATION = 1

8.23. Executing FSM pass (extract and optimize FSM).

8.23.1. Executing FSM_DETECT pass (finding FSMs in design).

8.23.2. Executing FSM_EXTRACT pass (extracting FSM from design).

8.23.3. Executing FSM_OPT pass (simple optimizations of FSMs).

8.23.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \divider_top..

8.23.5. Executing FSM_OPT pass (simple optimizations of FSMs).

8.23.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

8.23.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

8.23.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

8.24. Executing OPT_EXPR pass (perform const folding).
Optimizing module divider_top.

8.25. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\divider_top'.
Removed a total of 0 cells.

8.26. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \divider_top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

8.27. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \divider_top.
Performed a total of 0 changes.

8.28. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\divider_top'.
Removed a total of 0 cells.

8.29. Executing OPT_SHARE pass.

8.30. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $flatten\Divide_u.$verific$cycle_reg$/nfs_scratch/scratch/AE/Roman/open_source_design/divider/./divider.v:58$257 ($adff) from module divider_top (D = $flatten\Divide_u.$verific$n636$214, Q = \Divide_u.cycle).
Adding EN signal on $flatten\Divide_u.$verific$active_reg$/nfs_scratch/scratch/AE/Roman/open_source_design/divider/./divider.v:58$256 ($adff) from module divider_top (D = $flatten\Divide_u.$verific$n635$196, Q = \Divide_u.active).

8.31. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \divider_top..
Removed 2 unused cells and 2 unused wires.
<suppressed ~3 debug messages>

8.32. Executing OPT_EXPR pass (perform const folding).
Optimizing module divider_top.

8.33. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \divider_top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

8.34. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \divider_top.
Performed a total of 0 changes.

8.35. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\divider_top'.
Removed a total of 0 cells.

8.36. Executing OPT_SHARE pass.

8.37. Executing OPT_DFF pass (perform DFF optimizations).

8.38. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \divider_top..

8.39. Executing OPT_EXPR pass (perform const folding).
Optimizing module divider_top.
MAX OPT ITERATION = 2

8.40. Executing WREDUCE pass (reducing word size of cells).
Removed top 4 bits (of 5) from port B of cell divider_top.$flatten\Divide_u.$verific$sub_27$/nfs_scratch/scratch/AE/Roman/open_source_design/divider/./divider.v:48$241 ($sub).

8.41. Executing PEEPOPT pass (run peephole optimizers).

8.42. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \divider_top..

8.43. Executing DEMUXMAP pass.

8.44. Printing statistics.

=== divider_top ===

   Number of wires:                 16
   Number of wire bits:             28
   Number of public wires:          11
   Number of public wire bits:      15
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  8
     $adffe                          2
     $logic_not                      1
     $mux                            3
     $not                            1
     $sub                            1

8.45. Executing WREDUCE pass (reducing word size of cells).

8.46. Executing RS_DSP_MACC pass.

8.47. Executing TECHMAP pass (map to technology primitives).

8.47.1. Executing Verilog-2005 frontend: /nfs_cadtools/raptor/08_23_2022_08_00_01/bin/../share/yosys/mul2dsp.v
Parsing Verilog input from `/nfs_cadtools/raptor/08_23_2022_08_00_01/bin/../share/yosys/mul2dsp.v' to AST representation.
Generating RTLIL representation for module `\_80_mul'.
Generating RTLIL representation for module `\_90_soft_mul'.
Successfully finished Verilog frontend.

8.47.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

8.48. Executing TECHMAP pass (map to technology primitives).

8.48.1. Executing Verilog-2005 frontend: /nfs_cadtools/raptor/08_23_2022_08_00_01/bin/../share/yosys/mul2dsp.v
Parsing Verilog input from `/nfs_cadtools/raptor/08_23_2022_08_00_01/bin/../share/yosys/mul2dsp.v' to AST representation.
Generating RTLIL representation for module `\_80_mul'.
Generating RTLIL representation for module `\_90_soft_mul'.
Successfully finished Verilog frontend.

8.48.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

8.49. Executing TECHMAP pass (map to technology primitives).

8.49.1. Executing Verilog-2005 frontend: /nfs_cadtools/raptor/08_23_2022_08_00_01/bin/../share/yosys/rapidsilicon/genesis/dsp_map.v
Parsing Verilog input from `/nfs_cadtools/raptor/08_23_2022_08_00_01/bin/../share/yosys/rapidsilicon/genesis/dsp_map.v' to AST representation.
Generating RTLIL representation for module `\$__RS_MUL20X18'.
Generating RTLIL representation for module `\$__RS_MUL10X9'.
Successfully finished Verilog frontend.

8.49.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

8.50. Executing RS_DSP_SIMD pass.

8.51. Executing TECHMAP pass (map to technology primitives).

8.51.1. Executing Verilog-2005 frontend: /nfs_cadtools/raptor/08_23_2022_08_00_01/bin/../share/yosys/rapidsilicon/genesis/dsp_final_map.v
Parsing Verilog input from `/nfs_cadtools/raptor/08_23_2022_08_00_01/bin/../share/yosys/rapidsilicon/genesis/dsp_final_map.v' to AST representation.
Generating RTLIL representation for module `\dsp_t1_20x18x64_cfg_ports'.
Generating RTLIL representation for module `\dsp_t1_10x9x32_cfg_ports'.
Generating RTLIL representation for module `\dsp_t1_20x18x64_cfg_params'.
Generating RTLIL representation for module `\dsp_t1_10x9x32_cfg_params'.
Successfully finished Verilog frontend.

8.51.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~6 debug messages>

8.52. Executing RS_DSP_IO_REGS pass.

8.53. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module divider_top:
  creating $macc model for $flatten\Divide_u.$verific$sub_27$/nfs_scratch/scratch/AE/Roman/open_source_design/divider/./divider.v:48$241 ($sub).
  creating $alu model for $macc $flatten\Divide_u.$verific$sub_27$/nfs_scratch/scratch/AE/Roman/open_source_design/divider/./divider.v:48$241.
  creating $alu cell for $flatten\Divide_u.$verific$sub_27$/nfs_scratch/scratch/AE/Roman/open_source_design/divider/./divider.v:48$241: $auto$alumacc.cc:485:replace_alu$264
  created 1 $alu and 0 $macc cells.

8.54. Executing OPT_EXPR pass (perform const folding).
Optimizing module divider_top.

8.55. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\divider_top'.
Removed a total of 0 cells.

8.56. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \divider_top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

8.57. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \divider_top.
Performed a total of 0 changes.

8.58. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\divider_top'.
Removed a total of 0 cells.

8.59. Executing OPT_SHARE pass.

8.60. Executing OPT_DFF pass (perform DFF optimizations).

8.61. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \divider_top..

8.62. Executing OPT_EXPR pass (perform const folding).
Optimizing module divider_top.
MAX OPT ITERATION = 1

8.63. Printing statistics.

=== divider_top ===

   Number of wires:                 18
   Number of wire bits:             38
   Number of public wires:          11
   Number of public wire bits:      15
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  8
     $adffe                          2
     $alu                            1
     $logic_not                      1
     $mux                            3
     $not                            1

8.64. Executing MEMORY pass.

8.64.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

8.64.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

8.64.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

8.64.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

8.64.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

8.64.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \divider_top..

8.64.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

8.64.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

8.64.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \divider_top..

8.64.10. Executing MEMORY_COLLECT pass (generating $mem cells).

8.65. Printing statistics.

=== divider_top ===

   Number of wires:                 18
   Number of wire bits:             38
   Number of public wires:          11
   Number of public wire bits:      15
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  8
     $adffe                          2
     $alu                            1
     $logic_not                      1
     $mux                            3
     $not                            1

8.66. Executing MUXPACK pass ($mux cell cascades to $pmux).
Converted 0 (p)mux cells into 0 pmux cells.
<suppressed ~3 debug messages>

8.67. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \divider_top..

8.68. Executing MEMORY_BRAM pass (mapping $mem cells to block memories).

8.69. Executing TECHMAP pass (map to technology primitives).

8.69.1. Executing Verilog-2005 frontend: /nfs_cadtools/raptor/08_23_2022_08_00_01/bin/../share/yosys/rapidsilicon/genesis/brams_map.v
Parsing Verilog input from `/nfs_cadtools/raptor/08_23_2022_08_00_01/bin/../share/yosys/rapidsilicon/genesis/brams_map.v' to AST representation.
Generating RTLIL representation for module `\$__RS_FACTOR_BRAM36_TDP'.
Generating RTLIL representation for module `\$__RS_FACTOR_BRAM18_TDP'.
/nfs_cadtools/raptor/08_23_2022_08_00_01/bin/../share/yosys/rapidsilicon/genesis/brams_map.v:236: Warning: Range [2:0] select out of bounds on signal `\DOP': Setting 1 MSB bits to undef.
Generating RTLIL representation for module `\$__RS_FACTOR_BRAM36_SDP'.
Successfully finished Verilog frontend.

8.69.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~5 debug messages>

8.70. Executing PMUXTREE pass.

8.71. Executing MUXPACK pass ($mux cell cascades to $pmux).
Converted 0 (p)mux cells into 0 pmux cells.
<suppressed ~3 debug messages>

8.72. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

8.73. Printing statistics.

=== divider_top ===

   Number of wires:                 18
   Number of wire bits:             38
   Number of public wires:          11
   Number of public wire bits:      15
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  8
     $adffe                          2
     $alu                            1
     $logic_not                      1
     $mux                            3
     $not                            1

8.74. Executing TECHMAP pass (map to technology primitives).

8.74.1. Executing Verilog-2005 frontend: /nfs_cadtools/raptor/08_23_2022_08_00_01/bin/../share/yosys/techmap.v
Parsing Verilog input from `/nfs_cadtools/raptor/08_23_2022_08_00_01/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

8.74.2. Executing Verilog-2005 frontend: /nfs_cadtools/raptor/08_23_2022_08_00_01/bin/../share/yosys/rapidsilicon/genesis/arith_map.v
Parsing Verilog input from `/nfs_cadtools/raptor/08_23_2022_08_00_01/bin/../share/yosys/rapidsilicon/genesis/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_rs_alu'.
Successfully finished Verilog frontend.

8.74.3. Continuing TECHMAP pass.
Using template $paramod$dc04b7d98e503a7bab16fce2df70e6e2c5ca34d6\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $adffe.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $pos.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $and.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000101 for cells of type $lcu.
Using extmapper simplemap for cells of type $or.
No more expansions possible.
<suppressed ~260 debug messages>

8.75. Printing statistics.

=== divider_top ===

   Number of wires:                 54
   Number of wire bits:           1233
   Number of public wires:          11
   Number of public wire bits:      15
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 58
     $_AND_                         12
     $_DFFE_PP0P_                    6
     $_MUX_                         12
     $_NOT_                          7
     $_OR_                          10
     $_XOR_                         11

8.76. Executing OPT_EXPR pass (perform const folding).
Optimizing module divider_top.
<suppressed ~26 debug messages>

8.77. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\divider_top'.
Removed a total of 0 cells.

8.78. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \divider_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

8.79. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \divider_top.
Performed a total of 0 changes.

8.80. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\divider_top'.
Removed a total of 0 cells.

8.81. Executing OPT_SHARE pass.

8.82. Executing OPT_DFF pass (perform DFF optimizations).

8.83. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \divider_top..
Removed 3 unused cells and 34 unused wires.
<suppressed ~4 debug messages>

8.84. Executing OPT_EXPR pass (perform const folding).
Optimizing module divider_top.

8.85. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \divider_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

8.86. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \divider_top.
Performed a total of 0 changes.

8.87. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\divider_top'.
Removed a total of 0 cells.

8.88. Executing OPT_SHARE pass.

8.89. Executing OPT_DFF pass (perform DFF optimizations).

8.90. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \divider_top..

8.91. Executing OPT_EXPR pass (perform const folding).
Optimizing module divider_top.
MAX OPT ITERATION = 2

8.92. Executing OPT_EXPR pass (perform const folding).
Optimizing module divider_top.
<suppressed ~1 debug messages>

8.93. Executing TECHMAP pass (map to technology primitives).

8.93.1. Executing Verilog-2005 frontend: /nfs_cadtools/raptor/08_23_2022_08_00_01/bin/../share/yosys/techmap.v
Parsing Verilog input from `/nfs_cadtools/raptor/08_23_2022_08_00_01/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

8.93.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~71 debug messages>

8.94. Executing OPT_EXPR pass (perform const folding).
Optimizing module divider_top.

8.95. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\divider_top'.
Removed a total of 0 cells.

8.96. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \divider_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

8.97. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \divider_top.
Performed a total of 0 changes.

8.98. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\divider_top'.
Removed a total of 0 cells.

8.99. Executing OPT_DFF pass (perform DFF optimizations).

8.100. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \divider_top..

8.101. Executing OPT_EXPR pass (perform const folding).
Optimizing module divider_top.
MAX OPT ITERATION = 1

8.102. Executing ABC pass (technology mapping using ABC).

8.102.1. Summary of detected clock domains:
  35 cells in clk=\clock0, en=\start, arst=\reset, srst={ }

8.102.2. Extracting gate netlist of module `\divider_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock0, enabled by \start, asynchronously reset by \reset
Extracted 35 gates and 36 wires to a netlist network with 0 inputs and 1 outputs.

8.102.2.1. Executing ABC.

8.103. Executing ABC pass (technology mapping using ABC).

8.103.1. Summary of detected clock domains:
  19 cells in clk=\clock0, en=\start, arst=\reset, srst={ }

8.103.2. Extracting gate netlist of module `\divider_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock0, enabled by \start, asynchronously reset by \reset
Extracted 19 gates and 19 wires to a netlist network with 0 inputs and 1 outputs.

8.103.2.1. Executing ABC.

8.104. Executing ABC pass (technology mapping using ABC).

8.104.1. Summary of detected clock domains:
  19 cells in clk=\clock0, en=\start, arst=\reset, srst={ }

8.104.2. Extracting gate netlist of module `\divider_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock0, enabled by \start, asynchronously reset by \reset
Extracted 19 gates and 19 wires to a netlist network with 0 inputs and 1 outputs.

8.104.2.1. Executing ABC.

8.105. Executing ABC pass (technology mapping using ABC).

8.105.1. Summary of detected clock domains:
  19 cells in clk=\clock0, en=\start, arst=\reset, srst={ }

8.105.2. Extracting gate netlist of module `\divider_top' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock0, enabled by \start, asynchronously reset by \reset
Extracted 19 gates and 19 wires to a netlist network with 0 inputs and 1 outputs.

8.105.2.1. Executing ABC.

8.106. Executing OPT_FFINV pass (push inverters through FFs).
Discovering LUTs.
Pushed 0 inverters.

8.107. Executing OPT_EXPR pass (perform const folding).
Optimizing module divider_top.

8.108. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\divider_top'.
Removed a total of 0 cells.

8.109. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \divider_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

8.110. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \divider_top.
Performed a total of 0 changes.

8.111. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\divider_top'.
Removed a total of 0 cells.

8.112. Executing OPT_SHARE pass.

8.113. Executing OPT_DFF pass (perform DFF optimizations).

8.114. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \divider_top..
Removed 0 unused cells and 78 unused wires.
<suppressed ~3 debug messages>

8.115. Executing OPT_EXPR pass (perform const folding).
Optimizing module divider_top.
MAX OPT ITERATION = 1

8.116. Executing BMUXMAP pass.

8.117. Executing DEMUXMAP pass.

8.118. Executing ABC pass (technology mapping using ABC).

8.118.1. Extracting gate netlist of module `\divider_top' to `<abc-temp-dir>/input.blif'..
Extracted 13 gates and 19 wires to a netlist network with 6 inputs and 7 outputs.

8.118.1.1. Executing ABC.
DE:   #PIs =   6  #Luts =     7  Max Lvl =   1  Avg Lvl =   0.86  [   0.03 sec. at Pass 0]
DE:   #PIs =   6  #Luts =     7  Max Lvl =   1  Avg Lvl =   0.86  [   0.08 sec. at Pass 1]
DE:   #PIs =   6  #Luts =     7  Max Lvl =   1  Avg Lvl =   0.86  [   0.05 sec. at Pass 2]
DE:   #PIs =   6  #Luts =     7  Max Lvl =   1  Avg Lvl =   0.86  [   0.04 sec. at Pass 3]
DE:   #PIs =   6  #Luts =     7  Max Lvl =   1  Avg Lvl =   0.86  [   0.07 sec. at Pass 4]
DE:   #PIs =   6  #Luts =     7  Max Lvl =   1  Avg Lvl =   0.86  [   0.08 sec. at Pass 5]
DE:   #PIs =   6  #Luts =     7  Max Lvl =   1  Avg Lvl =   0.86  [   0.00 sec. at Pass 6]
DE:   #PIs =   6  #Luts =     7  Max Lvl =   1  Avg Lvl =   0.86  [   0.00 sec. at Pass 7]

8.119. Executing OPT_EXPR pass (perform const folding).
Optimizing module divider_top.

8.120. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\divider_top'.
Removed a total of 0 cells.

8.121. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \divider_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

8.122. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \divider_top.
Performed a total of 0 changes.

8.123. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\divider_top'.
Removed a total of 0 cells.

8.124. Executing OPT_SHARE pass.

8.125. Executing OPT_DFF pass (perform DFF optimizations).

8.126. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \divider_top..
Removed 0 unused cells and 19 unused wires.
<suppressed ~1 debug messages>

8.127. Executing OPT_EXPR pass (perform const folding).
Optimizing module divider_top.
MAX OPT ITERATION = 1

8.128. Executing OPT_FFINV pass (push inverters through FFs).
Discovering LUTs.
Pushed 0 inverters.

8.129. Printing statistics.

=== divider_top ===

   Number of wires:                 21
   Number of wire bits:             21
   Number of public wires:           9
   Number of public wire bits:       9
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 13
     $_DFFE_PP0P_                    6
     $lut                            7

8.130. Executing SHREGMAP pass (map shift registers).
Converted 0 dff cells into 0 shift registers.

8.131. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).

8.132. Printing statistics.

=== divider_top ===

   Number of wires:                 21
   Number of wire bits:             21
   Number of public wires:           9
   Number of public wire bits:       9
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 13
     $_DFFE_PP0P_                    6
     $lut                            7

8.133. Executing TECHMAP pass (map to technology primitives).

8.133.1. Executing Verilog-2005 frontend: /nfs_cadtools/raptor/08_23_2022_08_00_01/bin/../share/yosys/techmap.v
Parsing Verilog input from `/nfs_cadtools/raptor/08_23_2022_08_00_01/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

8.133.2. Executing Verilog-2005 frontend: /nfs_cadtools/raptor/08_23_2022_08_00_01/bin/../share/yosys/rapidsilicon/genesis/ffs_map.v
Parsing Verilog input from `/nfs_cadtools/raptor/08_23_2022_08_00_01/bin/../share/yosys/rapidsilicon/genesis/ffs_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_PP0P_'.
Generating RTLIL representation for module `\$_DFFE_PP0N_'.
Generating RTLIL representation for module `\$_DFFE_PN0P_'.
Generating RTLIL representation for module `\$_DFFE_PN0N_'.
Generating RTLIL representation for module `\$_DFFE_PP1P_'.
Generating RTLIL representation for module `\$_DFFE_PP1N_'.
Generating RTLIL representation for module `\$_DFFE_PN1P_'.
Generating RTLIL representation for module `\$_DFFE_PN1N_'.
Generating RTLIL representation for module `\$_DFFSR_PPP_'.
Generating RTLIL representation for module `\$_DFFSR_PNP_'.
Generating RTLIL representation for module `\$_DFFSR_PNN_'.
Generating RTLIL representation for module `\$_DFFSR_PPN_'.
Generating RTLIL representation for module `\$_DFFSR_NPP_'.
Generating RTLIL representation for module `\$_DFFSR_NNP_'.
Generating RTLIL representation for module `\$_DFFSR_NNN_'.
Generating RTLIL representation for module `\$_DFFSR_NPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PPPP_'.
Generating RTLIL representation for module `\$_DFFSRE_PNPP_'.
Generating RTLIL representation for module `\$_DFFSRE_PPNP_'.
Generating RTLIL representation for module `\$_DFFSRE_PNNP_'.
Generating RTLIL representation for module `\$_DFFSRE_PPPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PNPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PPNN_'.
Generating RTLIL representation for module `\$_DFFSRE_PNNN_'.
Generating RTLIL representation for module `\$_DLATCHSR_PPP_'.
Generating RTLIL representation for module `\$_DLATCHSR_NPP_'.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_NP0P_'.
Generating RTLIL representation for module `\$_DFFE_NP0N_'.
Generating RTLIL representation for module `\$_DFFE_NN0P_'.
Generating RTLIL representation for module `\$_DFFE_NN0N_'.
Generating RTLIL representation for module `\$_DFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFFE_NP1N_'.
Generating RTLIL representation for module `\$_DFFE_NN1P_'.
Generating RTLIL representation for module `\$_DFFE_NN1N_'.
Generating RTLIL representation for module `\$_DFFSRE_NPPP_'.
Generating RTLIL representation for module `\$_DFFSRE_NNPP_'.
Generating RTLIL representation for module `\$_DFFSRE_NPNP_'.
Generating RTLIL representation for module `\$_DFFSRE_NNNP_'.
Generating RTLIL representation for module `\$_DFFSRE_NPPN_'.
Generating RTLIL representation for module `\$_DFFSRE_NNPN_'.
Generating RTLIL representation for module `\$_DFFSRE_NPNN_'.
Generating RTLIL representation for module `\$_DFFSRE_NNNN_'.
Generating RTLIL representation for module `\$__SHREG_DFF_P_'.
Generating RTLIL representation for module `\$_SDFF_PP0_'.
Generating RTLIL representation for module `\$_SDFF_PN0_'.
Generating RTLIL representation for module `\$_SDFF_NP0_'.
Generating RTLIL representation for module `\$_SDFF_NN0_'.
Generating RTLIL representation for module `\$_SDFF_PP1_'.
Generating RTLIL representation for module `\$_SDFF_PN1_'.
Generating RTLIL representation for module `\$_SDFF_NP1_'.
Generating RTLIL representation for module `\$_SDFF_NN1_'.
Successfully finished Verilog frontend.

8.133.3. Continuing TECHMAP pass.
Using template \$_DFFE_PP0P_ for cells of type $_DFFE_PP0P_.
Using extmapper simplemap for cells of type $lut.
Using extmapper simplemap for cells of type $logic_not.
No more expansions possible.
<suppressed ~155 debug messages>

8.134. Executing OPT_EXPR pass (perform const folding).
Optimizing module divider_top.
<suppressed ~126 debug messages>

8.135. Executing SIMPLEMAP pass (map simple cells to gate primitives).

8.136. Executing OPT_EXPR pass (perform const folding).
Optimizing module divider_top.

8.137. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\divider_top'.
<suppressed ~21 debug messages>
Removed a total of 7 cells.

8.138. Executing OPT_DFF pass (perform DFF optimizations).

8.139. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \divider_top..
Removed 0 unused cells and 45 unused wires.
<suppressed ~1 debug messages>

8.140. Executing OPT_EXPR pass (perform const folding).
Optimizing module divider_top.

8.141. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\divider_top'.
Removed a total of 0 cells.

8.142. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \divider_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

8.143. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \divider_top.
Performed a total of 0 changes.

8.144. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\divider_top'.
Removed a total of 0 cells.

8.145. Executing OPT_SHARE pass.

8.146. Executing OPT_DFF pass (perform DFF optimizations).

8.147. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \divider_top..

8.148. Executing OPT_EXPR pass (perform const folding).
Optimizing module divider_top.
MAX OPT ITERATION = 1

8.149. Executing ABC pass (technology mapping using ABC).

8.149.1. Extracting gate netlist of module `\divider_top' to `<abc-temp-dir>/input.blif'..
Extracted 28 gates and 37 wires to a netlist network with 7 inputs and 8 outputs.

8.149.1.1. Executing ABC.
DE:   #PIs =   7  #Luts =     8  Max Lvl =   1  Avg Lvl =   0.75  [   0.07 sec. at Pass 0]
DE:   #PIs =   7  #Luts =     8  Max Lvl =   1  Avg Lvl =   0.75  [   1.93 sec. at Pass 1]
DE:   #PIs =   7  #Luts =     8  Max Lvl =   1  Avg Lvl =   0.75  [   0.05 sec. at Pass 2]
DE:   #PIs =   7  #Luts =     8  Max Lvl =   1  Avg Lvl =   0.75  [   0.05 sec. at Pass 3]
DE:   #PIs =   7  #Luts =     8  Max Lvl =   1  Avg Lvl =   0.75  [   0.07 sec. at Pass 4]
DE:   #PIs =   7  #Luts =     8  Max Lvl =   1  Avg Lvl =   0.75  [   0.07 sec. at Pass 5]
DE:   #PIs =   7  #Luts =     8  Max Lvl =   1  Avg Lvl =   0.75  [   0.00 sec. at Pass 6]
DE:   #PIs =   7  #Luts =     8  Max Lvl =   1  Avg Lvl =   0.75  [   0.00 sec. at Pass 7]

8.150. Executing OPT_EXPR pass (perform const folding).
Optimizing module divider_top.

8.151. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\divider_top'.
Removed a total of 0 cells.

8.152. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \divider_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

8.153. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \divider_top.
Performed a total of 0 changes.

8.154. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\divider_top'.
Removed a total of 0 cells.

8.155. Executing OPT_SHARE pass.

8.156. Executing OPT_DFF pass (perform DFF optimizations).

8.157. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \divider_top..
Removed 0 unused cells and 29 unused wires.
<suppressed ~1 debug messages>

8.158. Executing OPT_EXPR pass (perform const folding).
Optimizing module divider_top.
MAX OPT ITERATION = 1

8.159. Executing HIERARCHY pass (managing design hierarchy).

8.159.1. Analyzing design hierarchy..
Top module:  \divider_top

8.159.2. Analyzing design hierarchy..
Top module:  \divider_top
Removed 0 unused modules.

8.160. Printing statistics.

=== divider_top ===

   Number of wires:                 22
   Number of wire bits:             22
   Number of public wires:           9
   Number of public wire bits:       9
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 14
     $lut                            8
     dffsre                          6

8.161. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \divider_top..
Removed 0 unused cells and 4 unused wires.
<suppressed ~4 debug messages>

9. Executing BLIF backend.

10. Executing Verilog backend.
Dumping module `\divider_top'.

Warnings: 4 unique messages, 4 total
End of script. Logfile hash: bf995e7afc, CPU: user 0.32s system 0.03s, MEM: 23.26 MB peak
Yosys 0.18+10 (git sha1 c98b0e94e, gcc 9.4.0 -fPIC -Os)
Time spent: 95% 6x abc (7 sec), 1% 14x read_verilog (0 sec), ...
