
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys-Verific 0.0.92
 Yosys 0.18+10 (git sha1 18ac9db6a, gcc 9.4.0 -fPIC -Os)


-- Executing script file `lut_lut.ys' --

1. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific May22_SW_Release, released at Wed Jun  1 05:39:28 2022.

2. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific May22_SW_Release, released at Wed Jun  1 05:39:28 2022.

3. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific May22_SW_Release, released at Wed Jun  1 05:39:28 2022.

4. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific May22_SW_Release, released at Wed Jun  1 05:39:28 2022.
VERIFIC-COMMENT [VERI-1482] Analyzing Verilog file '/nfs_scratch/scratch/AE/saad/Micro-BenchMark-Brams/lut-lut-test-area/./lut2lut.v'

5. Executing VERIFIC (loading SystemVerilog and VHDL designs using Verific).
Built with Verific May22_SW_Release, released at Wed Jun  1 05:39:28 2022.
Adding Verilog module 'lut2lut' to elaboration queue.
Running hier_tree::Elaborate().
VERIFIC-INFO [VERI-1018] /nfs_scratch/scratch/AE/saad/Micro-BenchMark-Brams/lut-lut-test-area/./lut2lut.v:1: compiling module 'lut2lut'
Importing module lut2lut.

6. Executing HIERARCHY pass (managing design hierarchy).

6.1. Analyzing design hierarchy..
Top module:  \lut2lut

6.2. Analyzing design hierarchy..
Top module:  \lut2lut
Removed 0 unused modules.

7. Executing synth_rs pass: v0.4.79

7.1. Executing Verilog-2005 frontend: /nfs_cadtools/raptor/instl_dir/09_23_2022_08_00_01/bin/../share/yosys/rapidsilicon/common/cells_sim.v
Parsing Verilog input from `/nfs_cadtools/raptor/instl_dir/09_23_2022_08_00_01/bin/../share/yosys/rapidsilicon/common/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\inv'.
Generating RTLIL representation for module `\buff'.
Generating RTLIL representation for module `\logic_0'.
Generating RTLIL representation for module `\logic_1'.
Generating RTLIL representation for module `\gclkbuff'.
Successfully finished Verilog frontend.

7.2. Executing Verilog-2005 frontend: /nfs_cadtools/raptor/instl_dir/09_23_2022_08_00_01/bin/../share/yosys/rapidsilicon/genesis/cells_sim.v
Parsing Verilog input from `/nfs_cadtools/raptor/instl_dir/09_23_2022_08_00_01/bin/../share/yosys/rapidsilicon/genesis/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\dffsre'.
Generating RTLIL representation for module `\dffnsre'.
Generating RTLIL representation for module `\latchsre'.
Generating RTLIL representation for module `\latchnsre'.
Generating RTLIL representation for module `\io_scff'.
Generating RTLIL representation for module `\scff'.
Generating RTLIL representation for module `\sh_dff'.
Generating RTLIL representation for module `\adder_carry'.
Generating RTLIL representation for module `\sdffr'.
Generating RTLIL representation for module `\sdffs'.
Generating RTLIL representation for module `\TDP_BRAM18'.
Generating RTLIL representation for module `\TDP36K'.
Generating RTLIL representation for module `\BRAM2x18_TDP'.
Generating RTLIL representation for module `\BRAM2x18_SDP'.
Generating RTLIL representation for module `\_$_mem_v2_asymmetric'.
Successfully finished Verilog frontend.

7.3. Executing Verilog-2005 frontend: /nfs_cadtools/raptor/instl_dir/09_23_2022_08_00_01/bin/../share/yosys/rapidsilicon/genesis/dsp_sim.v
Parsing Verilog input from `/nfs_cadtools/raptor/instl_dir/09_23_2022_08_00_01/bin/../share/yosys/rapidsilicon/genesis/dsp_sim.v' to AST representation.
Generating RTLIL representation for module `\RS_DSP1'.
Generating RTLIL representation for module `\RS_DSP2'.
Generating RTLIL representation for module `\RS_DSP2_MULT'.
Generating RTLIL representation for module `\RS_DSP2_MULT_REGIN'.
Generating RTLIL representation for module `\RS_DSP2_MULT_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULT_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD_REGIN'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTADD_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC_REGIN'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC_REGOUT'.
Generating RTLIL representation for module `\RS_DSP2_MULTACC_REGIN_REGOUT'.
Generating RTLIL representation for module `\dsp_t1_20x18x64_cfg_ports'.
Generating RTLIL representation for module `\dsp_t1_10x9x32_cfg_ports'.
Generating RTLIL representation for module `\dsp_t1_sim_cfg_ports'.
Generating RTLIL representation for module `\RS_DSP3'.
Generating RTLIL representation for module `\RS_DSP3_MULT'.
Generating RTLIL representation for module `\RS_DSP3_MULT_REGIN'.
Generating RTLIL representation for module `\RS_DSP3_MULT_REGOUT'.
Generating RTLIL representation for module `\RS_DSP3_MULT_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP3_MULTADD'.
Generating RTLIL representation for module `\RS_DSP3_MULTADD_REGIN'.
Generating RTLIL representation for module `\RS_DSP3_MULTADD_REGOUT'.
Generating RTLIL representation for module `\RS_DSP3_MULTADD_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP3_MULTACC'.
Generating RTLIL representation for module `\RS_DSP3_MULTACC_REGIN'.
Generating RTLIL representation for module `\RS_DSP3_MULTACC_REGOUT'.
Generating RTLIL representation for module `\RS_DSP3_MULTACC_REGIN_REGOUT'.
Generating RTLIL representation for module `\dsp_t1_20x18x64_cfg_params'.
Generating RTLIL representation for module `\dsp_t1_10x9x32_cfg_params'.
Generating RTLIL representation for module `\dsp_t1_sim_cfg_params'.
Successfully finished Verilog frontend.

7.4. Executing HIERARCHY pass (managing design hierarchy).

7.4.1. Analyzing design hierarchy..
Top module:  \lut2lut

7.4.2. Analyzing design hierarchy..
Top module:  \lut2lut
Removed 0 unused modules.

7.5. Executing PROC pass (convert processes to netlists).

7.5.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

7.5.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

7.5.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

7.5.4. Executing PROC_INIT pass (extract init attributes).

7.5.5. Executing PROC_ARST pass (detect async resets in processes).

7.5.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

7.5.7. Executing PROC_MUX pass (convert decision trees to multiplexers).

7.5.8. Executing PROC_DLATCH pass (convert process syncs to latches).

7.5.9. Executing PROC_DFF pass (convert process syncs to FFs).

7.5.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

7.5.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

7.5.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module lut2lut.

7.6. Executing DEMUXMAP pass.

7.7. Executing FLATTEN pass (flatten design).

7.8. Executing DEMUXMAP pass.

7.9. Executing TRIBUF pass.

7.10. Executing DEMINOUT pass (demote inout ports to input or output).

7.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module lut2lut.

7.12. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \lut2lut..
Removed 0 unused cells and 13 unused wires.
<suppressed ~12 debug messages>

7.13. Executing CHECK pass (checking for obvious problems).
Checking module lut2lut...
Found and reported 0 problems.

7.14. Executing OPT_EXPR pass (perform const folding).
Optimizing module lut2lut.

7.15. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\lut2lut'.
Removed a total of 0 cells.

7.16. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \lut2lut..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

7.17. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \lut2lut.
Performed a total of 0 changes.

7.18. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\lut2lut'.
Removed a total of 0 cells.

7.19. Executing OPT_SHARE pass.

7.20. Executing OPT_DFF pass (perform DFF optimizations).

7.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \lut2lut..

7.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module lut2lut.
MAX OPT ITERATION = 1

7.23. Executing FSM pass (extract and optimize FSM).

7.23.1. Executing FSM_DETECT pass (finding FSMs in design).

7.23.2. Executing FSM_EXTRACT pass (extracting FSM from design).

7.23.3. Executing FSM_OPT pass (simple optimizations of FSMs).

7.23.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \lut2lut..

7.23.5. Executing FSM_OPT pass (simple optimizations of FSMs).

7.23.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

7.23.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

7.23.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

7.24. Executing OPT_EXPR pass (perform const folding).
Optimizing module lut2lut.

7.25. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\lut2lut'.
Removed a total of 0 cells.

7.26. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \lut2lut..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

7.27. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \lut2lut.
Performed a total of 0 changes.

7.28. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\lut2lut'.
Removed a total of 0 cells.

7.29. Executing OPT_SHARE pass.

7.30. Executing OPT_DFF pass (perform DFF optimizations).

7.31. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \lut2lut..

7.32. Executing OPT_EXPR pass (perform const folding).
Optimizing module lut2lut.
MAX OPT ITERATION = 1

7.33. Executing WREDUCE pass (reducing word size of cells).

7.34. Executing PEEPOPT pass (run peephole optimizers).

7.35. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \lut2lut..

7.36. Executing DEMUXMAP pass.

7.37. Printing statistics.

=== lut2lut ===

   Number of wires:                 25
   Number of wire bits:             25
   Number of public wires:          20
   Number of public wire bits:      20
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 16
     $and                            7
     $dff                            9

7.38. Executing WREDUCE pass (reducing word size of cells).

7.39. Executing RS_DSP_MACC pass.

7.40. Executing TECHMAP pass (map to technology primitives).

7.40.1. Executing Verilog-2005 frontend: /nfs_cadtools/raptor/instl_dir/09_23_2022_08_00_01/bin/../share/yosys/mul2dsp_check_maxwidth.v
Parsing Verilog input from `/nfs_cadtools/raptor/instl_dir/09_23_2022_08_00_01/bin/../share/yosys/mul2dsp_check_maxwidth.v' to AST representation.
Generating RTLIL representation for module `\_80_mul'.
Generating RTLIL representation for module `\_90_soft_mul'.
Successfully finished Verilog frontend.

7.40.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

7.41. Printing statistics.

=== lut2lut ===

   Number of wires:                 25
   Number of wire bits:             25
   Number of public wires:          20
   Number of public wire bits:      20
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 16
     $and                            7
     $dff                            9

7.42. Executing TECHMAP pass (map to technology primitives).

7.42.1. Executing Verilog-2005 frontend: /nfs_cadtools/raptor/instl_dir/09_23_2022_08_00_01/bin/../share/yosys/mul2dsp_check_maxwidth.v
Parsing Verilog input from `/nfs_cadtools/raptor/instl_dir/09_23_2022_08_00_01/bin/../share/yosys/mul2dsp_check_maxwidth.v' to AST representation.
Generating RTLIL representation for module `\_80_mul'.
Generating RTLIL representation for module `\_90_soft_mul'.
Successfully finished Verilog frontend.

7.42.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

7.43. Printing statistics.

=== lut2lut ===

   Number of wires:                 25
   Number of wire bits:             25
   Number of public wires:          20
   Number of public wire bits:      20
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 16
     $and                            7
     $dff                            9

7.44. Executing TECHMAP pass (map to technology primitives).

7.44.1. Executing Verilog-2005 frontend: /nfs_cadtools/raptor/instl_dir/09_23_2022_08_00_01/bin/../share/yosys/mul2dsp.v
Parsing Verilog input from `/nfs_cadtools/raptor/instl_dir/09_23_2022_08_00_01/bin/../share/yosys/mul2dsp.v' to AST representation.
Generating RTLIL representation for module `\_80_mul'.
Generating RTLIL representation for module `\_90_soft_mul'.
Successfully finished Verilog frontend.

7.44.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

7.45. Executing TECHMAP pass (map to technology primitives).

7.45.1. Executing Verilog-2005 frontend: /nfs_cadtools/raptor/instl_dir/09_23_2022_08_00_01/bin/../share/yosys/mul2dsp.v
Parsing Verilog input from `/nfs_cadtools/raptor/instl_dir/09_23_2022_08_00_01/bin/../share/yosys/mul2dsp.v' to AST representation.
Generating RTLIL representation for module `\_80_mul'.
Generating RTLIL representation for module `\_90_soft_mul'.
Successfully finished Verilog frontend.

7.45.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

7.46. Executing TECHMAP pass (map to technology primitives).

7.46.1. Executing Verilog-2005 frontend: /nfs_cadtools/raptor/instl_dir/09_23_2022_08_00_01/bin/../share/yosys/rapidsilicon/genesis/dsp_map.v
Parsing Verilog input from `/nfs_cadtools/raptor/instl_dir/09_23_2022_08_00_01/bin/../share/yosys/rapidsilicon/genesis/dsp_map.v' to AST representation.
Generating RTLIL representation for module `\$__RS_MUL20X18'.
Generating RTLIL representation for module `\$__RS_MUL10X9'.
Successfully finished Verilog frontend.

7.46.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

7.47. Executing RS_DSP_SIMD pass.

7.48. Executing TECHMAP pass (map to technology primitives).

7.48.1. Executing Verilog-2005 frontend: /nfs_cadtools/raptor/instl_dir/09_23_2022_08_00_01/bin/../share/yosys/rapidsilicon/genesis/dsp_final_map.v
Parsing Verilog input from `/nfs_cadtools/raptor/instl_dir/09_23_2022_08_00_01/bin/../share/yosys/rapidsilicon/genesis/dsp_final_map.v' to AST representation.
Generating RTLIL representation for module `\dsp_t1_20x18x64_cfg_ports'.
Generating RTLIL representation for module `\dsp_t1_10x9x32_cfg_ports'.
Generating RTLIL representation for module `\dsp_t1_20x18x64_cfg_params'.
Generating RTLIL representation for module `\dsp_t1_10x9x32_cfg_params'.
Successfully finished Verilog frontend.

7.48.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~6 debug messages>

7.49. Executing RS_DSP_IO_REGS pass.

7.50. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module lut2lut:
  created 0 $alu and 0 $macc cells.

7.51. Executing OPT_EXPR pass (perform const folding).
Optimizing module lut2lut.

7.52. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\lut2lut'.
Removed a total of 0 cells.

7.53. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \lut2lut..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

7.54. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \lut2lut.
Performed a total of 0 changes.

7.55. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\lut2lut'.
Removed a total of 0 cells.

7.56. Executing OPT_SHARE pass.

7.57. Executing OPT_DFF pass (perform DFF optimizations).

7.58. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \lut2lut..

7.59. Executing OPT_EXPR pass (perform const folding).
Optimizing module lut2lut.
MAX OPT ITERATION = 1

7.60. Printing statistics.

=== lut2lut ===

   Number of wires:                 25
   Number of wire bits:             25
   Number of public wires:          20
   Number of public wire bits:      20
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 16
     $and                            7
     $dff                            9

7.61. Executing MEMORY pass.

7.61.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

7.61.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

7.61.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

7.61.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

7.61.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

7.61.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \lut2lut..

7.61.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

7.61.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

7.61.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \lut2lut..

7.61.10. Executing MEMORY_COLLECT pass (generating $mem cells).

7.62. Printing statistics.

=== lut2lut ===

   Number of wires:                 25
   Number of wire bits:             25
   Number of public wires:          20
   Number of public wire bits:      20
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 16
     $and                            7
     $dff                            9

7.63. Executing MUXPACK pass ($mux cell cascades to $pmux).
Converted 0 (p)mux cells into 0 pmux cells.

7.64. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \lut2lut..

7.65. Executing RS_BRAM_ASYMMETRIC pass.
<suppressed ~2 debug messages>

7.66. Executing MEMORY_BRAM pass (mapping $mem cells to block memories).

7.67. Executing Rs_BRAM_Split pass.

7.68. Executing TECHMAP pass (map to technology primitives).

7.68.1. Executing Verilog-2005 frontend: /nfs_cadtools/raptor/instl_dir/09_23_2022_08_00_01/bin/../share/yosys/rapidsilicon/genesis/brams_map.v
Parsing Verilog input from `/nfs_cadtools/raptor/instl_dir/09_23_2022_08_00_01/bin/../share/yosys/rapidsilicon/genesis/brams_map.v' to AST representation.
Generating RTLIL representation for module `\$__RS_FACTOR_BRAM36_TDP'.
Generating RTLIL representation for module `\$__RS_FACTOR_BRAM18_TDP'.
Generating RTLIL representation for module `\$__RS_FACTOR_BRAM18_SDP'.
Generating RTLIL representation for module `\$__RS_FACTOR_BRAM36_SDP'.
Generating RTLIL representation for module `\$__RS_FACTOR_BRAM36_SDP_ASYMMETRIC'.
Note: Assuming pure combinatorial block at /nfs_cadtools/raptor/instl_dir/09_23_2022_08_00_01/bin/../share/yosys/rapidsilicon/genesis/brams_map.v:940.2-945.5 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Successfully finished Verilog frontend.

7.68.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~7 debug messages>

7.69. Executing TECHMAP pass (map to technology primitives).

7.69.1. Executing Verilog-2005 frontend: /nfs_cadtools/raptor/instl_dir/09_23_2022_08_00_01/bin/../share/yosys/rapidsilicon/genesis/brams_final_map.v
Parsing Verilog input from `/nfs_cadtools/raptor/instl_dir/09_23_2022_08_00_01/bin/../share/yosys/rapidsilicon/genesis/brams_final_map.v' to AST representation.
Generating RTLIL representation for module `\BRAM2x18_TDP'.
Generating RTLIL representation for module `\BRAM2x18_SDP'.
Successfully finished Verilog frontend.

7.69.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

7.70. Executing PMUXTREE pass.

7.71. Executing MUXPACK pass ($mux cell cascades to $pmux).
Converted 0 (p)mux cells into 0 pmux cells.

7.72. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

7.73. Printing statistics.

=== lut2lut ===

   Number of wires:                 25
   Number of wire bits:             25
   Number of public wires:          20
   Number of public wire bits:      20
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 16
     $and                            7
     $dff                            9

7.74. Executing TECHMAP pass (map to technology primitives).

7.74.1. Executing Verilog-2005 frontend: /nfs_cadtools/raptor/instl_dir/09_23_2022_08_00_01/bin/../share/yosys/techmap.v
Parsing Verilog input from `/nfs_cadtools/raptor/instl_dir/09_23_2022_08_00_01/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

7.74.2. Executing Verilog-2005 frontend: /nfs_cadtools/raptor/instl_dir/09_23_2022_08_00_01/bin/../share/yosys/rapidsilicon/genesis/arith_map.v
Parsing Verilog input from `/nfs_cadtools/raptor/instl_dir/09_23_2022_08_00_01/bin/../share/yosys/rapidsilicon/genesis/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_rs_alu'.
Successfully finished Verilog frontend.

7.74.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $and.
No more expansions possible.
<suppressed ~87 debug messages>

7.75. Printing statistics.

=== lut2lut ===

   Number of wires:                 25
   Number of wire bits:             25
   Number of public wires:          20
   Number of public wire bits:      20
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 16
     $_AND_                          7
     $_DFF_P_                        9

7.76. Executing OPT_EXPR pass (perform const folding).
Optimizing module lut2lut.

7.77. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\lut2lut'.
Removed a total of 0 cells.

7.78. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \lut2lut..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

7.79. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \lut2lut.
Performed a total of 0 changes.

7.80. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\lut2lut'.
Removed a total of 0 cells.

7.81. Executing OPT_SHARE pass.

7.82. Executing OPT_DFF pass (perform DFF optimizations).

7.83. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \lut2lut..

7.84. Executing OPT_EXPR pass (perform const folding).
Optimizing module lut2lut.
MAX OPT ITERATION = 1

7.85. Executing OPT_EXPR pass (perform const folding).
Optimizing module lut2lut.

7.86. Executing TECHMAP pass (map to technology primitives).

7.86.1. Executing Verilog-2005 frontend: /nfs_cadtools/raptor/instl_dir/09_23_2022_08_00_01/bin/../share/yosys/techmap.v
Parsing Verilog input from `/nfs_cadtools/raptor/instl_dir/09_23_2022_08_00_01/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

7.86.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~71 debug messages>

7.87. Executing BMUXMAP pass.

7.88. Executing DEMUXMAP pass.

7.89. Executing ABC pass (technology mapping using ABC).

7.89.1. Extracting gate netlist of module `\lut2lut' to `<abc-temp-dir>/input.blif'..
Extracted 7 gates and 15 wires to a netlist network with 8 inputs and 1 outputs.

7.89.1.1. Executing ABC.
DE:   #PIs =   8  #Luts =     2  Max Lvl =   2  Avg Lvl =   2.00  [   0.04 sec. at Pass 0]{firstMap}
DE:   #PIs =   8  #Luts =     2  Max Lvl =   2  Avg Lvl =   2.00  [   0.06 sec. at Pass 1]{initMapFlow}
DE:   #PIs =   8  #Luts =     2  Max Lvl =   2  Avg Lvl =   2.00  [   0.04 sec. at Pass 2]{map}
DE:   #PIs =   8  #Luts =     2  Max Lvl =   2  Avg Lvl =   2.00  [   0.04 sec. at Pass 3]{postMap}
DE:   #PIs =   8  #Luts =     2  Max Lvl =   2  Avg Lvl =   2.00  [   0.07 sec. at Pass 4]{map}
DE:   #PIs =   8  #Luts =     2  Max Lvl =   2  Avg Lvl =   2.00  [   0.09 sec. at Pass 5]{postMap}
DE:   #PIs =   8  #Luts =     2  Max Lvl =   2  Avg Lvl =   2.00  [   0.00 sec. at Pass 6]{pushMap}
DE:   #PIs =   8  #Luts =     2  Max Lvl =   2  Avg Lvl =   2.00  [   0.00 sec. at Pass 7]{finalMap}

7.90. Executing OPT_EXPR pass (perform const folding).
Optimizing module lut2lut.

7.91. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\lut2lut'.
Removed a total of 0 cells.

7.92. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \lut2lut..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

7.93. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \lut2lut.
Performed a total of 0 changes.

7.94. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\lut2lut'.
Removed a total of 0 cells.

7.95. Executing OPT_SHARE pass.

7.96. Executing OPT_DFF pass (perform DFF optimizations).

7.97. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \lut2lut..
Removed 0 unused cells and 15 unused wires.
<suppressed ~2 debug messages>

7.98. Executing OPT_EXPR pass (perform const folding).
Optimizing module lut2lut.
MAX OPT ITERATION = 1

7.99. Printing statistics.

=== lut2lut ===

   Number of wires:                 20
   Number of wire bits:             20
   Number of public wires:          19
   Number of public wire bits:      19
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 11
     $_DFF_P_                        9
     $lut                            2

7.100. Executing SHREGMAP pass (map shift registers).
Converted 0 dff cells into 0 shift registers.

7.101. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).

7.102. Printing statistics.

=== lut2lut ===

   Number of wires:                 20
   Number of wire bits:             20
   Number of public wires:          19
   Number of public wire bits:      19
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 11
     $_DFF_P_                        9
     $lut                            2

7.103. Executing TECHMAP pass (map to technology primitives).

7.103.1. Executing Verilog-2005 frontend: /nfs_cadtools/raptor/instl_dir/09_23_2022_08_00_01/bin/../share/yosys/techmap.v
Parsing Verilog input from `/nfs_cadtools/raptor/instl_dir/09_23_2022_08_00_01/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

7.103.2. Executing Verilog-2005 frontend: /nfs_cadtools/raptor/instl_dir/09_23_2022_08_00_01/bin/../share/yosys/rapidsilicon/genesis/ffs_map.v
Parsing Verilog input from `/nfs_cadtools/raptor/instl_dir/09_23_2022_08_00_01/bin/../share/yosys/rapidsilicon/genesis/ffs_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_PP0P_'.
Generating RTLIL representation for module `\$_DFFE_PP0N_'.
Generating RTLIL representation for module `\$_DFFE_PN0P_'.
Generating RTLIL representation for module `\$_DFFE_PN0N_'.
Generating RTLIL representation for module `\$_DFFE_PP1P_'.
Generating RTLIL representation for module `\$_DFFE_PP1N_'.
Generating RTLIL representation for module `\$_DFFE_PN1P_'.
Generating RTLIL representation for module `\$_DFFE_PN1N_'.
Generating RTLIL representation for module `\$_DFFSR_PPP_'.
Generating RTLIL representation for module `\$_DFFSR_PNP_'.
Generating RTLIL representation for module `\$_DFFSR_PNN_'.
Generating RTLIL representation for module `\$_DFFSR_PPN_'.
Generating RTLIL representation for module `\$_DFFSR_NPP_'.
Generating RTLIL representation for module `\$_DFFSR_NNP_'.
Generating RTLIL representation for module `\$_DFFSR_NNN_'.
Generating RTLIL representation for module `\$_DFFSR_NPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PPPP_'.
Generating RTLIL representation for module `\$_DFFSRE_PNPP_'.
Generating RTLIL representation for module `\$_DFFSRE_PPNP_'.
Generating RTLIL representation for module `\$_DFFSRE_PNNP_'.
Generating RTLIL representation for module `\$_DFFSRE_PPPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PNPN_'.
Generating RTLIL representation for module `\$_DFFSRE_PPNN_'.
Generating RTLIL representation for module `\$_DFFSRE_PNNN_'.
Generating RTLIL representation for module `\$_DLATCHSR_PPP_'.
Generating RTLIL representation for module `\$_DLATCHSR_NPP_'.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_NP0P_'.
Generating RTLIL representation for module `\$_DFFE_NP0N_'.
Generating RTLIL representation for module `\$_DFFE_NN0P_'.
Generating RTLIL representation for module `\$_DFFE_NN0N_'.
Generating RTLIL representation for module `\$_DFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFFE_NP1N_'.
Generating RTLIL representation for module `\$_DFFE_NN1P_'.
Generating RTLIL representation for module `\$_DFFE_NN1N_'.
Generating RTLIL representation for module `\$_DFFSRE_NPPP_'.
Generating RTLIL representation for module `\$_DFFSRE_NNPP_'.
Generating RTLIL representation for module `\$_DFFSRE_NPNP_'.
Generating RTLIL representation for module `\$_DFFSRE_NNNP_'.
Generating RTLIL representation for module `\$_DFFSRE_NPPN_'.
Generating RTLIL representation for module `\$_DFFSRE_NNPN_'.
Generating RTLIL representation for module `\$_DFFSRE_NPNN_'.
Generating RTLIL representation for module `\$_DFFSRE_NNNN_'.
Generating RTLIL representation for module `\$__SHREG_DFF_P_'.
Generating RTLIL representation for module `\$_SDFF_PP0_'.
Generating RTLIL representation for module `\$_SDFF_PN0_'.
Generating RTLIL representation for module `\$_SDFF_NP0_'.
Generating RTLIL representation for module `\$_SDFF_NN0_'.
Generating RTLIL representation for module `\$_SDFF_PP1_'.
Generating RTLIL representation for module `\$_SDFF_PN1_'.
Generating RTLIL representation for module `\$_SDFF_NP1_'.
Generating RTLIL representation for module `\$_SDFF_NN1_'.
Successfully finished Verilog frontend.

7.103.3. Continuing TECHMAP pass.
Using template \$_DFF_P_ for cells of type $_DFF_P_.
Using extmapper simplemap for cells of type $lut.
No more expansions possible.
<suppressed ~147 debug messages>

7.104. Executing OPT_EXPR pass (perform const folding).
Optimizing module lut2lut.
<suppressed ~63 debug messages>

7.105. Executing SIMPLEMAP pass (map simple cells to gate primitives).

7.106. Executing OPT_EXPR pass (perform const folding).
Optimizing module lut2lut.

7.107. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\lut2lut'.
Removed a total of 0 cells.

7.108. Executing OPT_DFF pass (perform DFF optimizations).

7.109. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \lut2lut..
Removed 0 unused cells and 31 unused wires.
<suppressed ~1 debug messages>

7.110. Executing OPT_EXPR pass (perform const folding).
Optimizing module lut2lut.

7.111. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\lut2lut'.
Removed a total of 0 cells.

7.112. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \lut2lut..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

7.113. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \lut2lut.
Performed a total of 0 changes.

7.114. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\lut2lut'.
Removed a total of 0 cells.

7.115. Executing OPT_SHARE pass.

7.116. Executing OPT_DFF pass (perform DFF optimizations).

7.117. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \lut2lut..

7.118. Executing OPT_EXPR pass (perform const folding).
Optimizing module lut2lut.
MAX OPT ITERATION = 1

7.119. Executing ABC pass (technology mapping using ABC).

7.119.1. Extracting gate netlist of module `\lut2lut' to `<abc-temp-dir>/input.blif'..
Extracted 7 gates and 16 wires to a netlist network with 8 inputs and 1 outputs.

7.119.1.1. Executing ABC.
DE:   #PIs =   8  #Luts =     2  Max Lvl =   2  Avg Lvl =   2.00  [   0.05 sec. at Pass 0]{firstMap}
DE:   #PIs =   8  #Luts =     2  Max Lvl =   2  Avg Lvl =   2.00  [   0.08 sec. at Pass 1]{initMapFlow}
DE:   #PIs =   8  #Luts =     2  Max Lvl =   2  Avg Lvl =   2.00  [   0.05 sec. at Pass 2]{map}
DE:   #PIs =   8  #Luts =     2  Max Lvl =   2  Avg Lvl =   2.00  [   0.06 sec. at Pass 3]{postMap}
DE:   #PIs =   8  #Luts =     2  Max Lvl =   2  Avg Lvl =   2.00  [   0.13 sec. at Pass 4]{map}
DE:   #PIs =   8  #Luts =     2  Max Lvl =   2  Avg Lvl =   2.00  [   0.09 sec. at Pass 5]{postMap}
DE:   #PIs =   8  #Luts =     2  Max Lvl =   2  Avg Lvl =   2.00  [   0.00 sec. at Pass 6]{pushMap}
DE:   #PIs =   8  #Luts =     2  Max Lvl =   2  Avg Lvl =   2.00  [   0.00 sec. at Pass 7]{finalMap}

7.120. Executing OPT_EXPR pass (perform const folding).
Optimizing module lut2lut.

7.121. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\lut2lut'.
Removed a total of 0 cells.

7.122. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \lut2lut..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

7.123. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \lut2lut.
Performed a total of 0 changes.

7.124. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\lut2lut'.
Removed a total of 0 cells.

7.125. Executing OPT_SHARE pass.

7.126. Executing OPT_DFF pass (perform DFF optimizations).

7.127. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \lut2lut..
Removed 0 unused cells and 15 unused wires.
<suppressed ~1 debug messages>

7.128. Executing OPT_EXPR pass (perform const folding).
Optimizing module lut2lut.
MAX OPT ITERATION = 1

7.129. Executing HIERARCHY pass (managing design hierarchy).

7.129.1. Analyzing design hierarchy..
Top module:  \lut2lut

7.129.2. Analyzing design hierarchy..
Top module:  \lut2lut
Removed 0 unused modules.

7.130. Printing statistics.

=== lut2lut ===

   Number of wires:                 20
   Number of wire bits:             20
   Number of public wires:          19
   Number of public wire bits:      19
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 11
     $lut                            2
     dffsre                          9

7.131. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \lut2lut..

8. Executing BLIF backend.

9. Executing Verilog backend.
Dumping module `\lut2lut'.

End of script. Logfile hash: 567b2decbf, CPU: user 0.33s system 0.03s, MEM: 24.77 MB peak
Yosys 0.18+10 (git sha1 18ac9db6a, gcc 9.4.0 -fPIC -Os)
Time spent: 96% 2x abc (8 sec), 2% 17x read_verilog (0 sec), ...
